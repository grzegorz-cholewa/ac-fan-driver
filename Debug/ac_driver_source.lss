
ac_driver_source.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000011dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000011dc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000120c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  0000124c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001215  00000000  00000000  000012ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b10  00000000  00000000  000024c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b67  00000000  00000000  00002fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000174  00000000  00000000  00003b38  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00011729  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002f3  00000000  00000000  000153d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  000156c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0000025b  00000000  00000000  00015758  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
       2:	00 00       	nop
       4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
       6:	00 00       	nop
       8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
       a:	00 00       	nop
       c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
       e:	00 00       	nop
      10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
      12:	00 00       	nop
      14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
      16:	00 00       	nop
      18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
      22:	00 00       	nop
      24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
      26:	00 00       	nop
      28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
      32:	00 00       	nop
      34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
      36:	00 00       	nop
      38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
      42:	00 00       	nop
      44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
      46:	00 00       	nop
      48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
      52:	00 00       	nop
      54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
      56:	00 00       	nop
      58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
      62:	00 00       	nop
      64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
      66:	00 00       	nop
      68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
      72:	00 00       	nop
      74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
      76:	00 00       	nop
      78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
      82:	00 00       	nop
      84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
      86:	00 00       	nop
      88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	1c c0       	rjmp	.+56     	; 0xc6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1a c0       	rjmp	.+52     	; 0xc6 <__bad_interrupt>
      92:	00 00       	nop
      94:	18 c0       	rjmp	.+48     	; 0xc6 <__bad_interrupt>
      96:	00 00       	nop
      98:	16 c0       	rjmp	.+44     	; 0xc6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	14 c0       	rjmp	.+40     	; 0xc6 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	12 c0       	rjmp	.+36     	; 0xc6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	10 c0       	rjmp	.+32     	; 0xc6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c0       	rjmp	.+28     	; 0xc6 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	0c c0       	rjmp	.+24     	; 0xc6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0a c0       	rjmp	.+20     	; 0xc6 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
      b4:	11 24       	eor	r1, r1
      b6:	1f be       	out	0x3f, r1	; 63
      b8:	cf ef       	ldi	r28, 0xFF	; 255
      ba:	d8 e0       	ldi	r29, 0x08	; 8
      bc:	de bf       	out	0x3e, r29	; 62
      be:	cd bf       	out	0x3d, r28	; 61
      c0:	5c d6       	rcall	.+3256   	; 0xd7a <main>
      c2:	0c 94 c2 08 	jmp	0x1184	; 0x1184 <_exit>

000000c6 <__bad_interrupt>:
      c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ioport_get_pin_level>:
 *
 * \param pin IOPORT pin to read
 * \return Current logical value of the specified pin
 */
static inline bool ioport_get_pin_level(ioport_pin_t pin)
{
      c8:	cf 93       	push	r28
      ca:	df 93       	push	r29
      cc:	cd b7       	in	r28, 0x3d	; 61
      ce:	de b7       	in	r29, 0x3e	; 62
      d0:	2b 97       	sbiw	r28, 0x0b	; 11
      d2:	0f b6       	in	r0, 0x3f	; 63
      d4:	f8 94       	cli
      d6:	de bf       	out	0x3e, r29	; 62
      d8:	0f be       	out	0x3f, r0	; 63
      da:	cd bf       	out	0x3d, r28	; 61
      dc:	9b 87       	std	Y+11, r25	; 0x0b
      de:	8a 87       	std	Y+10, r24	; 0x0a
      e0:	8a 85       	ldd	r24, Y+10	; 0x0a
      e2:	9b 85       	ldd	r25, Y+11	; 0x0b
      e4:	9a 83       	std	Y+2, r25	; 0x02
      e6:	89 83       	std	Y+1, r24	; 0x01
      e8:	89 81       	ldd	r24, Y+1	; 0x01
      ea:	9a 81       	ldd	r25, Y+2	; 0x02
      ec:	9c 83       	std	Y+4, r25	; 0x04
      ee:	8b 83       	std	Y+3, r24	; 0x03
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
      f0:	8b 81       	ldd	r24, Y+3	; 0x03
      f2:	9c 81       	ldd	r25, Y+4	; 0x04
      f4:	96 95       	lsr	r25
      f6:	87 95       	ror	r24
      f8:	96 95       	lsr	r25
      fa:	87 95       	ror	r24
      fc:	96 95       	lsr	r25
      fe:	87 95       	ror	r24
     100:	8d 83       	std	Y+5, r24	; 0x05
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     102:	8d 81       	ldd	r24, Y+5	; 0x05
     104:	28 2f       	mov	r18, r24
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	c9 01       	movw	r24, r18
     10a:	88 0f       	add	r24, r24
     10c:	99 1f       	adc	r25, r25
     10e:	82 0f       	add	r24, r18
     110:	93 1f       	adc	r25, r19
     112:	80 96       	adiw	r24, 0x20	; 32
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
     114:	9f 83       	std	Y+7, r25	; 0x07
     116:	8e 83       	std	Y+6, r24	; 0x06
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     118:	8e 81       	ldd	r24, Y+6	; 0x06
     11a:	9f 81       	ldd	r25, Y+7	; 0x07
     11c:	fc 01       	movw	r30, r24
     11e:	40 81       	ld	r20, Z
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	9a 81       	ldd	r25, Y+2	; 0x02
     124:	99 87       	std	Y+9, r25	; 0x09
     126:	88 87       	std	Y+8, r24	; 0x08
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     128:	88 85       	ldd	r24, Y+8	; 0x08
     12a:	99 85       	ldd	r25, Y+9	; 0x09
     12c:	9c 01       	movw	r18, r24
     12e:	27 70       	andi	r18, 0x07	; 7
     130:	33 27       	eor	r19, r19
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	02 c0       	rjmp	.+4      	; 0x13c <ioport_get_pin_level+0x74>
     138:	88 0f       	add	r24, r24
     13a:	99 1f       	adc	r25, r25
     13c:	2a 95       	dec	r18
     13e:	e2 f7       	brpl	.-8      	; 0x138 <ioport_get_pin_level+0x70>
 * \return: level high/low
 */
__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);
	return base->PINCRL & arch_ioport_pin_to_mask(pin);
     140:	94 2f       	mov	r25, r20
     142:	98 23       	and	r25, r24
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	99 23       	and	r25, r25
     148:	09 f4       	brne	.+2      	; 0x14c <ioport_get_pin_level+0x84>
     14a:	80 e0       	ldi	r24, 0x00	; 0
	return arch_ioport_get_pin_level(pin);
}
     14c:	2b 96       	adiw	r28, 0x0b	; 11
     14e:	0f b6       	in	r0, 0x3f	; 63
     150:	f8 94       	cli
     152:	de bf       	out	0x3e, r29	; 62
     154:	0f be       	out	0x3f, r0	; 63
     156:	cd bf       	out	0x3d, r28	; 61
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
     15e:	04 c0       	rjmp	.+8      	; 0x168 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
     160:	61 50       	subi	r22, 0x01	; 1
     162:	71 09       	sbc	r23, r1
     164:	81 09       	sbc	r24, r1
     166:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
     168:	61 15       	cp	r22, r1
     16a:	71 05       	cpc	r23, r1
     16c:	81 05       	cpc	r24, r1
     16e:	91 05       	cpc	r25, r1
     170:	b9 f7       	brne	.-18     	; 0x160 <__portable_avr_delay_cycles+0x2>
     172:	08 95       	ret

00000174 <gpio_init>:
bool zero_crossing_read(void);
void read_sensor_values(sensor_values_t * sensor_values);

/* FUNCTION DEFINITIONS */
void gpio_init(void)
{
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	c1 54       	subi	r28, 0x41	; 65
     17e:	d1 09       	sbc	r29, r1
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	8d e0       	ldi	r24, 0x0D	; 13
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	9f ab       	std	Y+55, r25	; 0x37
     194:	8e ab       	std	Y+54, r24	; 0x36
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     196:	89 81       	ldd	r24, Y+1	; 0x01
     198:	88 2f       	mov	r24, r24
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	99 af       	std	Y+57, r25	; 0x39
     19e:	88 af       	std	Y+56, r24	; 0x38
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     1a0:	88 ad       	ldd	r24, Y+56	; 0x38
     1a2:	99 ad       	ldd	r25, Y+57	; 0x39
     1a4:	9c 01       	movw	r18, r24
     1a6:	27 70       	andi	r18, 0x07	; 7
     1a8:	33 27       	eor	r19, r19
     1aa:	81 e0       	ldi	r24, 0x01	; 1
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <gpio_init+0x40>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	2a 95       	dec	r18
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <gpio_init+0x3c>
     1b8:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     1ba:	89 81       	ldd	r24, Y+1	; 0x01
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	9b af       	std	Y+59, r25	; 0x3b
     1c2:	8a af       	std	Y+58, r24	; 0x3a
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     1c4:	8a ad       	ldd	r24, Y+58	; 0x3a
     1c6:	9b ad       	ldd	r25, Y+59	; 0x3b
     1c8:	96 95       	lsr	r25
     1ca:	87 95       	ror	r24
     1cc:	96 95       	lsr	r25
     1ce:	87 95       	ror	r24
     1d0:	96 95       	lsr	r25
     1d2:	87 95       	ror	r24
     1d4:	8c af       	std	Y+60, r24	; 0x3c
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     1d6:	8c ad       	ldd	r24, Y+60	; 0x3c
     1d8:	28 2f       	mov	r18, r24
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	c9 01       	movw	r24, r18
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	82 0f       	add	r24, r18
     1e4:	93 1f       	adc	r25, r19
     1e6:	80 96       	adiw	r24, 0x20	; 32
     1e8:	9e af       	std	Y+62, r25	; 0x3e
     1ea:	8d af       	std	Y+61, r24	; 0x3d
     1ec:	4f af       	std	Y+63, r20	; 0x3f
     1ee:	ce 01       	movw	r24, r28
     1f0:	80 5c       	subi	r24, 0xC0	; 192
     1f2:	9f 4f       	sbci	r25, 0xFF	; 255
     1f4:	2e a9       	ldd	r18, Y+54	; 0x36
     1f6:	3f a9       	ldd	r19, Y+55	; 0x37
     1f8:	fc 01       	movw	r30, r24
     1fa:	31 83       	std	Z+1, r19	; 0x01
     1fc:	20 83       	st	Z, r18
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     1fe:	ce 01       	movw	r24, r28
     200:	80 5c       	subi	r24, 0xC0	; 192
     202:	9f 4f       	sbci	r25, 0xFF	; 255
     204:	fc 01       	movw	r30, r24
     206:	80 81       	ld	r24, Z
     208:	91 81       	ldd	r25, Z+1	; 0x01
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	a9 f1       	breq	.+106    	; 0x27c <gpio_init+0x108>
		if (flags & IOPORT_INIT_HIGH) {
     212:	ce 01       	movw	r24, r28
     214:	80 5c       	subi	r24, 0xC0	; 192
     216:	9f 4f       	sbci	r25, 0xFF	; 255
     218:	fc 01       	movw	r30, r24
     21a:	80 81       	ld	r24, Z
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	82 70       	andi	r24, 0x02	; 2
     220:	99 27       	eor	r25, r25
     222:	89 2b       	or	r24, r25
     224:	71 f0       	breq	.+28     	; 0x242 <gpio_init+0xce>
			*((uint8_t *)port + 2) |= pin_mask;
     226:	8d ad       	ldd	r24, Y+61	; 0x3d
     228:	9e ad       	ldd	r25, Y+62	; 0x3e
     22a:	02 96       	adiw	r24, 0x02	; 2
     22c:	2d ad       	ldd	r18, Y+61	; 0x3d
     22e:	3e ad       	ldd	r19, Y+62	; 0x3e
     230:	2e 5f       	subi	r18, 0xFE	; 254
     232:	3f 4f       	sbci	r19, 0xFF	; 255
     234:	f9 01       	movw	r30, r18
     236:	30 81       	ld	r19, Z
     238:	2f ad       	ldd	r18, Y+63	; 0x3f
     23a:	23 2b       	or	r18, r19
     23c:	fc 01       	movw	r30, r24
     23e:	20 83       	st	Z, r18
     240:	0f c0       	rjmp	.+30     	; 0x260 <gpio_init+0xec>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     242:	8d ad       	ldd	r24, Y+61	; 0x3d
     244:	9e ad       	ldd	r25, Y+62	; 0x3e
     246:	02 96       	adiw	r24, 0x02	; 2
     248:	2d ad       	ldd	r18, Y+61	; 0x3d
     24a:	3e ad       	ldd	r19, Y+62	; 0x3e
     24c:	2e 5f       	subi	r18, 0xFE	; 254
     24e:	3f 4f       	sbci	r19, 0xFF	; 255
     250:	f9 01       	movw	r30, r18
     252:	20 81       	ld	r18, Z
     254:	32 2f       	mov	r19, r18
     256:	2f ad       	ldd	r18, Y+63	; 0x3f
     258:	20 95       	com	r18
     25a:	23 23       	and	r18, r19
     25c:	fc 01       	movw	r30, r24
     25e:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     260:	8d ad       	ldd	r24, Y+61	; 0x3d
     262:	9e ad       	ldd	r25, Y+62	; 0x3e
     264:	01 96       	adiw	r24, 0x01	; 1
     266:	2d ad       	ldd	r18, Y+61	; 0x3d
     268:	3e ad       	ldd	r19, Y+62	; 0x3e
     26a:	2f 5f       	subi	r18, 0xFF	; 255
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	f9 01       	movw	r30, r18
     270:	30 81       	ld	r19, Z
     272:	2f ad       	ldd	r18, Y+63	; 0x3f
     274:	23 2b       	or	r18, r19
     276:	fc 01       	movw	r30, r24
     278:	20 83       	st	Z, r18
     27a:	36 c0       	rjmp	.+108    	; 0x2e8 <gpio_init+0x174>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     27c:	8d ad       	ldd	r24, Y+61	; 0x3d
     27e:	9e ad       	ldd	r25, Y+62	; 0x3e
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	2d ad       	ldd	r18, Y+61	; 0x3d
     284:	3e ad       	ldd	r19, Y+62	; 0x3e
     286:	2f 5f       	subi	r18, 0xFF	; 255
     288:	3f 4f       	sbci	r19, 0xFF	; 255
     28a:	f9 01       	movw	r30, r18
     28c:	20 81       	ld	r18, Z
     28e:	32 2f       	mov	r19, r18
     290:	2f ad       	ldd	r18, Y+63	; 0x3f
     292:	20 95       	com	r18
     294:	23 23       	and	r18, r19
     296:	fc 01       	movw	r30, r24
     298:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     29a:	ce 01       	movw	r24, r28
     29c:	80 5c       	subi	r24, 0xC0	; 192
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	fc 01       	movw	r30, r24
     2a2:	80 81       	ld	r24, Z
     2a4:	91 81       	ldd	r25, Z+1	; 0x01
     2a6:	84 70       	andi	r24, 0x04	; 4
     2a8:	99 27       	eor	r25, r25
     2aa:	89 2b       	or	r24, r25
     2ac:	71 f0       	breq	.+28     	; 0x2ca <gpio_init+0x156>
			*((uint8_t *)port + 2) |= pin_mask;
     2ae:	8d ad       	ldd	r24, Y+61	; 0x3d
     2b0:	9e ad       	ldd	r25, Y+62	; 0x3e
     2b2:	02 96       	adiw	r24, 0x02	; 2
     2b4:	2d ad       	ldd	r18, Y+61	; 0x3d
     2b6:	3e ad       	ldd	r19, Y+62	; 0x3e
     2b8:	2e 5f       	subi	r18, 0xFE	; 254
     2ba:	3f 4f       	sbci	r19, 0xFF	; 255
     2bc:	f9 01       	movw	r30, r18
     2be:	30 81       	ld	r19, Z
     2c0:	2f ad       	ldd	r18, Y+63	; 0x3f
     2c2:	23 2b       	or	r18, r19
     2c4:	fc 01       	movw	r30, r24
     2c6:	20 83       	st	Z, r18
     2c8:	0f c0       	rjmp	.+30     	; 0x2e8 <gpio_init+0x174>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     2ca:	8d ad       	ldd	r24, Y+61	; 0x3d
     2cc:	9e ad       	ldd	r25, Y+62	; 0x3e
     2ce:	02 96       	adiw	r24, 0x02	; 2
     2d0:	2d ad       	ldd	r18, Y+61	; 0x3d
     2d2:	3e ad       	ldd	r19, Y+62	; 0x3e
     2d4:	2e 5f       	subi	r18, 0xFE	; 254
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	f9 01       	movw	r30, r18
     2da:	20 81       	ld	r18, Z
     2dc:	32 2f       	mov	r19, r18
     2de:	2f ad       	ldd	r18, Y+63	; 0x3f
     2e0:	20 95       	com	r18
     2e2:	23 23       	and	r18, r19
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	8a 83       	std	Y+2, r24	; 0x02
     2ec:	84 e0       	ldi	r24, 0x04	; 4
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	9b a7       	std	Y+43, r25	; 0x2b
     2f2:	8a a7       	std	Y+42, r24	; 0x2a
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     2f4:	8a 81       	ldd	r24, Y+2	; 0x02
     2f6:	88 2f       	mov	r24, r24
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	9d a7       	std	Y+45, r25	; 0x2d
     2fc:	8c a7       	std	Y+44, r24	; 0x2c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     2fe:	8c a5       	ldd	r24, Y+44	; 0x2c
     300:	9d a5       	ldd	r25, Y+45	; 0x2d
     302:	9c 01       	movw	r18, r24
     304:	27 70       	andi	r18, 0x07	; 7
     306:	33 27       	eor	r19, r19
     308:	81 e0       	ldi	r24, 0x01	; 1
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	02 c0       	rjmp	.+4      	; 0x312 <gpio_init+0x19e>
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	2a 95       	dec	r18
     314:	e2 f7       	brpl	.-8      	; 0x30e <gpio_init+0x19a>
     316:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     318:	8a 81       	ldd	r24, Y+2	; 0x02
     31a:	88 2f       	mov	r24, r24
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	9f a7       	std	Y+47, r25	; 0x2f
     320:	8e a7       	std	Y+46, r24	; 0x2e
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     322:	8e a5       	ldd	r24, Y+46	; 0x2e
     324:	9f a5       	ldd	r25, Y+47	; 0x2f
     326:	96 95       	lsr	r25
     328:	87 95       	ror	r24
     32a:	96 95       	lsr	r25
     32c:	87 95       	ror	r24
     32e:	96 95       	lsr	r25
     330:	87 95       	ror	r24
     332:	88 ab       	std	Y+48, r24	; 0x30
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     334:	88 a9       	ldd	r24, Y+48	; 0x30
     336:	28 2f       	mov	r18, r24
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	c9 01       	movw	r24, r18
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	80 96       	adiw	r24, 0x20	; 32
     346:	9a ab       	std	Y+50, r25	; 0x32
     348:	89 ab       	std	Y+49, r24	; 0x31
     34a:	4b ab       	std	Y+51, r20	; 0x33
     34c:	8a a5       	ldd	r24, Y+42	; 0x2a
     34e:	9b a5       	ldd	r25, Y+43	; 0x2b
     350:	9d ab       	std	Y+53, r25	; 0x35
     352:	8c ab       	std	Y+52, r24	; 0x34
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     354:	8c a9       	ldd	r24, Y+52	; 0x34
     356:	9d a9       	ldd	r25, Y+53	; 0x35
     358:	81 70       	andi	r24, 0x01	; 1
     35a:	99 27       	eor	r25, r25
     35c:	89 2b       	or	r24, r25
     35e:	89 f1       	breq	.+98     	; 0x3c2 <gpio_init+0x24e>
		if (flags & IOPORT_INIT_HIGH) {
     360:	8c a9       	ldd	r24, Y+52	; 0x34
     362:	9d a9       	ldd	r25, Y+53	; 0x35
     364:	82 70       	andi	r24, 0x02	; 2
     366:	99 27       	eor	r25, r25
     368:	89 2b       	or	r24, r25
     36a:	71 f0       	breq	.+28     	; 0x388 <gpio_init+0x214>
			*((uint8_t *)port + 2) |= pin_mask;
     36c:	89 a9       	ldd	r24, Y+49	; 0x31
     36e:	9a a9       	ldd	r25, Y+50	; 0x32
     370:	02 96       	adiw	r24, 0x02	; 2
     372:	29 a9       	ldd	r18, Y+49	; 0x31
     374:	3a a9       	ldd	r19, Y+50	; 0x32
     376:	2e 5f       	subi	r18, 0xFE	; 254
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	f9 01       	movw	r30, r18
     37c:	30 81       	ld	r19, Z
     37e:	2b a9       	ldd	r18, Y+51	; 0x33
     380:	23 2b       	or	r18, r19
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
     386:	0f c0       	rjmp	.+30     	; 0x3a6 <gpio_init+0x232>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     388:	89 a9       	ldd	r24, Y+49	; 0x31
     38a:	9a a9       	ldd	r25, Y+50	; 0x32
     38c:	02 96       	adiw	r24, 0x02	; 2
     38e:	29 a9       	ldd	r18, Y+49	; 0x31
     390:	3a a9       	ldd	r19, Y+50	; 0x32
     392:	2e 5f       	subi	r18, 0xFE	; 254
     394:	3f 4f       	sbci	r19, 0xFF	; 255
     396:	f9 01       	movw	r30, r18
     398:	20 81       	ld	r18, Z
     39a:	32 2f       	mov	r19, r18
     39c:	2b a9       	ldd	r18, Y+51	; 0x33
     39e:	20 95       	com	r18
     3a0:	23 23       	and	r18, r19
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     3a6:	89 a9       	ldd	r24, Y+49	; 0x31
     3a8:	9a a9       	ldd	r25, Y+50	; 0x32
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	29 a9       	ldd	r18, Y+49	; 0x31
     3ae:	3a a9       	ldd	r19, Y+50	; 0x32
     3b0:	2f 5f       	subi	r18, 0xFF	; 255
     3b2:	3f 4f       	sbci	r19, 0xFF	; 255
     3b4:	f9 01       	movw	r30, r18
     3b6:	30 81       	ld	r19, Z
     3b8:	2b a9       	ldd	r18, Y+51	; 0x33
     3ba:	23 2b       	or	r18, r19
     3bc:	fc 01       	movw	r30, r24
     3be:	20 83       	st	Z, r18
     3c0:	32 c0       	rjmp	.+100    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     3c2:	89 a9       	ldd	r24, Y+49	; 0x31
     3c4:	9a a9       	ldd	r25, Y+50	; 0x32
     3c6:	01 96       	adiw	r24, 0x01	; 1
     3c8:	29 a9       	ldd	r18, Y+49	; 0x31
     3ca:	3a a9       	ldd	r19, Y+50	; 0x32
     3cc:	2f 5f       	subi	r18, 0xFF	; 255
     3ce:	3f 4f       	sbci	r19, 0xFF	; 255
     3d0:	f9 01       	movw	r30, r18
     3d2:	20 81       	ld	r18, Z
     3d4:	32 2f       	mov	r19, r18
     3d6:	2b a9       	ldd	r18, Y+51	; 0x33
     3d8:	20 95       	com	r18
     3da:	23 23       	and	r18, r19
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     3e0:	8c a9       	ldd	r24, Y+52	; 0x34
     3e2:	9d a9       	ldd	r25, Y+53	; 0x35
     3e4:	84 70       	andi	r24, 0x04	; 4
     3e6:	99 27       	eor	r25, r25
     3e8:	89 2b       	or	r24, r25
     3ea:	71 f0       	breq	.+28     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
			*((uint8_t *)port + 2) |= pin_mask;
     3ec:	89 a9       	ldd	r24, Y+49	; 0x31
     3ee:	9a a9       	ldd	r25, Y+50	; 0x32
     3f0:	02 96       	adiw	r24, 0x02	; 2
     3f2:	29 a9       	ldd	r18, Y+49	; 0x31
     3f4:	3a a9       	ldd	r19, Y+50	; 0x32
     3f6:	2e 5f       	subi	r18, 0xFE	; 254
     3f8:	3f 4f       	sbci	r19, 0xFF	; 255
     3fa:	f9 01       	movw	r30, r18
     3fc:	30 81       	ld	r19, Z
     3fe:	2b a9       	ldd	r18, Y+51	; 0x33
     400:	23 2b       	or	r18, r19
     402:	fc 01       	movw	r30, r24
     404:	20 83       	st	Z, r18
     406:	0f c0       	rjmp	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     408:	89 a9       	ldd	r24, Y+49	; 0x31
     40a:	9a a9       	ldd	r25, Y+50	; 0x32
     40c:	02 96       	adiw	r24, 0x02	; 2
     40e:	29 a9       	ldd	r18, Y+49	; 0x31
     410:	3a a9       	ldd	r19, Y+50	; 0x32
     412:	2e 5f       	subi	r18, 0xFE	; 254
     414:	3f 4f       	sbci	r19, 0xFF	; 255
     416:	f9 01       	movw	r30, r18
     418:	20 81       	ld	r18, Z
     41a:	32 2f       	mov	r19, r18
     41c:	2b a9       	ldd	r18, Y+51	; 0x33
     41e:	20 95       	com	r18
     420:	23 23       	and	r18, r19
     422:	fc 01       	movw	r30, r24
     424:	20 83       	st	Z, r18
     426:	88 e0       	ldi	r24, 0x08	; 8
     428:	8b 83       	std	Y+3, r24	; 0x03
     42a:	84 e0       	ldi	r24, 0x04	; 4
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	9f 8f       	std	Y+31, r25	; 0x1f
     430:	8e 8f       	std	Y+30, r24	; 0x1e
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     432:	8b 81       	ldd	r24, Y+3	; 0x03
     434:	88 2f       	mov	r24, r24
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	99 a3       	std	Y+33, r25	; 0x21
     43a:	88 a3       	std	Y+32, r24	; 0x20
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     43c:	88 a1       	ldd	r24, Y+32	; 0x20
     43e:	99 a1       	ldd	r25, Y+33	; 0x21
     440:	9c 01       	movw	r18, r24
     442:	27 70       	andi	r18, 0x07	; 7
     444:	33 27       	eor	r19, r19
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	90 e0       	ldi	r25, 0x00	; 0
     44a:	02 c0       	rjmp	.+4      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	2a 95       	dec	r18
     452:	e2 f7       	brpl	.-8      	; 0x44c <__LOCK_REGION_LENGTH__+0x4c>
     454:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     456:	8b 81       	ldd	r24, Y+3	; 0x03
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	9b a3       	std	Y+35, r25	; 0x23
     45e:	8a a3       	std	Y+34, r24	; 0x22
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     460:	8a a1       	ldd	r24, Y+34	; 0x22
     462:	9b a1       	ldd	r25, Y+35	; 0x23
     464:	96 95       	lsr	r25
     466:	87 95       	ror	r24
     468:	96 95       	lsr	r25
     46a:	87 95       	ror	r24
     46c:	96 95       	lsr	r25
     46e:	87 95       	ror	r24
     470:	8c a3       	std	Y+36, r24	; 0x24
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     472:	8c a1       	ldd	r24, Y+36	; 0x24
     474:	28 2f       	mov	r18, r24
     476:	30 e0       	ldi	r19, 0x00	; 0
     478:	c9 01       	movw	r24, r18
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	82 0f       	add	r24, r18
     480:	93 1f       	adc	r25, r19
     482:	80 96       	adiw	r24, 0x20	; 32
     484:	9e a3       	std	Y+38, r25	; 0x26
     486:	8d a3       	std	Y+37, r24	; 0x25
     488:	4f a3       	std	Y+39, r20	; 0x27
     48a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     48c:	9f 8d       	ldd	r25, Y+31	; 0x1f
     48e:	99 a7       	std	Y+41, r25	; 0x29
     490:	88 a7       	std	Y+40, r24	; 0x28
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     492:	88 a5       	ldd	r24, Y+40	; 0x28
     494:	99 a5       	ldd	r25, Y+41	; 0x29
     496:	81 70       	andi	r24, 0x01	; 1
     498:	99 27       	eor	r25, r25
     49a:	89 2b       	or	r24, r25
     49c:	89 f1       	breq	.+98     	; 0x500 <__LOCK_REGION_LENGTH__+0x100>
		if (flags & IOPORT_INIT_HIGH) {
     49e:	88 a5       	ldd	r24, Y+40	; 0x28
     4a0:	99 a5       	ldd	r25, Y+41	; 0x29
     4a2:	82 70       	andi	r24, 0x02	; 2
     4a4:	99 27       	eor	r25, r25
     4a6:	89 2b       	or	r24, r25
     4a8:	71 f0       	breq	.+28     	; 0x4c6 <__LOCK_REGION_LENGTH__+0xc6>
			*((uint8_t *)port + 2) |= pin_mask;
     4aa:	8d a1       	ldd	r24, Y+37	; 0x25
     4ac:	9e a1       	ldd	r25, Y+38	; 0x26
     4ae:	02 96       	adiw	r24, 0x02	; 2
     4b0:	2d a1       	ldd	r18, Y+37	; 0x25
     4b2:	3e a1       	ldd	r19, Y+38	; 0x26
     4b4:	2e 5f       	subi	r18, 0xFE	; 254
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	f9 01       	movw	r30, r18
     4ba:	30 81       	ld	r19, Z
     4bc:	2f a1       	ldd	r18, Y+39	; 0x27
     4be:	23 2b       	or	r18, r19
     4c0:	fc 01       	movw	r30, r24
     4c2:	20 83       	st	Z, r18
     4c4:	0f c0       	rjmp	.+30     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     4c6:	8d a1       	ldd	r24, Y+37	; 0x25
     4c8:	9e a1       	ldd	r25, Y+38	; 0x26
     4ca:	02 96       	adiw	r24, 0x02	; 2
     4cc:	2d a1       	ldd	r18, Y+37	; 0x25
     4ce:	3e a1       	ldd	r19, Y+38	; 0x26
     4d0:	2e 5f       	subi	r18, 0xFE	; 254
     4d2:	3f 4f       	sbci	r19, 0xFF	; 255
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	32 2f       	mov	r19, r18
     4da:	2f a1       	ldd	r18, Y+39	; 0x27
     4dc:	20 95       	com	r18
     4de:	23 23       	and	r18, r19
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     4e4:	8d a1       	ldd	r24, Y+37	; 0x25
     4e6:	9e a1       	ldd	r25, Y+38	; 0x26
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	2d a1       	ldd	r18, Y+37	; 0x25
     4ec:	3e a1       	ldd	r19, Y+38	; 0x26
     4ee:	2f 5f       	subi	r18, 0xFF	; 255
     4f0:	3f 4f       	sbci	r19, 0xFF	; 255
     4f2:	f9 01       	movw	r30, r18
     4f4:	30 81       	ld	r19, Z
     4f6:	2f a1       	ldd	r18, Y+39	; 0x27
     4f8:	23 2b       	or	r18, r19
     4fa:	fc 01       	movw	r30, r24
     4fc:	20 83       	st	Z, r18
     4fe:	32 c0       	rjmp	.+100    	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     500:	8d a1       	ldd	r24, Y+37	; 0x25
     502:	9e a1       	ldd	r25, Y+38	; 0x26
     504:	01 96       	adiw	r24, 0x01	; 1
     506:	2d a1       	ldd	r18, Y+37	; 0x25
     508:	3e a1       	ldd	r19, Y+38	; 0x26
     50a:	2f 5f       	subi	r18, 0xFF	; 255
     50c:	3f 4f       	sbci	r19, 0xFF	; 255
     50e:	f9 01       	movw	r30, r18
     510:	20 81       	ld	r18, Z
     512:	32 2f       	mov	r19, r18
     514:	2f a1       	ldd	r18, Y+39	; 0x27
     516:	20 95       	com	r18
     518:	23 23       	and	r18, r19
     51a:	fc 01       	movw	r30, r24
     51c:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     51e:	88 a5       	ldd	r24, Y+40	; 0x28
     520:	99 a5       	ldd	r25, Y+41	; 0x29
     522:	84 70       	andi	r24, 0x04	; 4
     524:	99 27       	eor	r25, r25
     526:	89 2b       	or	r24, r25
     528:	71 f0       	breq	.+28     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			*((uint8_t *)port + 2) |= pin_mask;
     52a:	8d a1       	ldd	r24, Y+37	; 0x25
     52c:	9e a1       	ldd	r25, Y+38	; 0x26
     52e:	02 96       	adiw	r24, 0x02	; 2
     530:	2d a1       	ldd	r18, Y+37	; 0x25
     532:	3e a1       	ldd	r19, Y+38	; 0x26
     534:	2e 5f       	subi	r18, 0xFE	; 254
     536:	3f 4f       	sbci	r19, 0xFF	; 255
     538:	f9 01       	movw	r30, r18
     53a:	30 81       	ld	r19, Z
     53c:	2f a1       	ldd	r18, Y+39	; 0x27
     53e:	23 2b       	or	r18, r19
     540:	fc 01       	movw	r30, r24
     542:	20 83       	st	Z, r18
     544:	0f c0       	rjmp	.+30     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     546:	8d a1       	ldd	r24, Y+37	; 0x25
     548:	9e a1       	ldd	r25, Y+38	; 0x26
     54a:	02 96       	adiw	r24, 0x02	; 2
     54c:	2d a1       	ldd	r18, Y+37	; 0x25
     54e:	3e a1       	ldd	r19, Y+38	; 0x26
     550:	2e 5f       	subi	r18, 0xFE	; 254
     552:	3f 4f       	sbci	r19, 0xFF	; 255
     554:	f9 01       	movw	r30, r18
     556:	20 81       	ld	r18, Z
     558:	32 2f       	mov	r19, r18
     55a:	2f a1       	ldd	r18, Y+39	; 0x27
     55c:	20 95       	com	r18
     55e:	23 23       	and	r18, r19
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
     564:	89 e0       	ldi	r24, 0x09	; 9
     566:	8c 83       	std	Y+4, r24	; 0x04
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	9b 8b       	std	Y+19, r25	; 0x13
     56e:	8a 8b       	std	Y+18, r24	; 0x12
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     570:	8c 81       	ldd	r24, Y+4	; 0x04
     572:	88 2f       	mov	r24, r24
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	9d 8b       	std	Y+21, r25	; 0x15
     578:	8c 8b       	std	Y+20, r24	; 0x14
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     57a:	8c 89       	ldd	r24, Y+20	; 0x14
     57c:	9d 89       	ldd	r25, Y+21	; 0x15
     57e:	9c 01       	movw	r18, r24
     580:	27 70       	andi	r18, 0x07	; 7
     582:	33 27       	eor	r19, r19
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	02 c0       	rjmp	.+4      	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	2a 95       	dec	r18
     590:	e2 f7       	brpl	.-8      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     592:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     594:	8c 81       	ldd	r24, Y+4	; 0x04
     596:	88 2f       	mov	r24, r24
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	9f 8b       	std	Y+23, r25	; 0x17
     59c:	8e 8b       	std	Y+22, r24	; 0x16
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     59e:	8e 89       	ldd	r24, Y+22	; 0x16
     5a0:	9f 89       	ldd	r25, Y+23	; 0x17
     5a2:	96 95       	lsr	r25
     5a4:	87 95       	ror	r24
     5a6:	96 95       	lsr	r25
     5a8:	87 95       	ror	r24
     5aa:	96 95       	lsr	r25
     5ac:	87 95       	ror	r24
     5ae:	88 8f       	std	Y+24, r24	; 0x18
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     5b0:	88 8d       	ldd	r24, Y+24	; 0x18
     5b2:	28 2f       	mov	r18, r24
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	c9 01       	movw	r24, r18
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	82 0f       	add	r24, r18
     5be:	93 1f       	adc	r25, r19
     5c0:	80 96       	adiw	r24, 0x20	; 32
     5c2:	9a 8f       	std	Y+26, r25	; 0x1a
     5c4:	89 8f       	std	Y+25, r24	; 0x19
     5c6:	4b 8f       	std	Y+27, r20	; 0x1b
     5c8:	8a 89       	ldd	r24, Y+18	; 0x12
     5ca:	9b 89       	ldd	r25, Y+19	; 0x13
     5cc:	9d 8f       	std	Y+29, r25	; 0x1d
     5ce:	8c 8f       	std	Y+28, r24	; 0x1c
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     5d0:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5d2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5d4:	81 70       	andi	r24, 0x01	; 1
     5d6:	99 27       	eor	r25, r25
     5d8:	89 2b       	or	r24, r25
     5da:	89 f1       	breq	.+98     	; 0x63e <__LOCK_REGION_LENGTH__+0x23e>
		if (flags & IOPORT_INIT_HIGH) {
     5dc:	8c 8d       	ldd	r24, Y+28	; 0x1c
     5de:	9d 8d       	ldd	r25, Y+29	; 0x1d
     5e0:	82 70       	andi	r24, 0x02	; 2
     5e2:	99 27       	eor	r25, r25
     5e4:	89 2b       	or	r24, r25
     5e6:	71 f0       	breq	.+28     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
			*((uint8_t *)port + 2) |= pin_mask;
     5e8:	89 8d       	ldd	r24, Y+25	; 0x19
     5ea:	9a 8d       	ldd	r25, Y+26	; 0x1a
     5ec:	02 96       	adiw	r24, 0x02	; 2
     5ee:	29 8d       	ldd	r18, Y+25	; 0x19
     5f0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     5f2:	2e 5f       	subi	r18, 0xFE	; 254
     5f4:	3f 4f       	sbci	r19, 0xFF	; 255
     5f6:	f9 01       	movw	r30, r18
     5f8:	30 81       	ld	r19, Z
     5fa:	2b 8d       	ldd	r18, Y+27	; 0x1b
     5fc:	23 2b       	or	r18, r19
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
     602:	0f c0       	rjmp	.+30     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     604:	89 8d       	ldd	r24, Y+25	; 0x19
     606:	9a 8d       	ldd	r25, Y+26	; 0x1a
     608:	02 96       	adiw	r24, 0x02	; 2
     60a:	29 8d       	ldd	r18, Y+25	; 0x19
     60c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     60e:	2e 5f       	subi	r18, 0xFE	; 254
     610:	3f 4f       	sbci	r19, 0xFF	; 255
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	32 2f       	mov	r19, r18
     618:	2b 8d       	ldd	r18, Y+27	; 0x1b
     61a:	20 95       	com	r18
     61c:	23 23       	and	r18, r19
     61e:	fc 01       	movw	r30, r24
     620:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     622:	89 8d       	ldd	r24, Y+25	; 0x19
     624:	9a 8d       	ldd	r25, Y+26	; 0x1a
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	29 8d       	ldd	r18, Y+25	; 0x19
     62a:	3a 8d       	ldd	r19, Y+26	; 0x1a
     62c:	2f 5f       	subi	r18, 0xFF	; 255
     62e:	3f 4f       	sbci	r19, 0xFF	; 255
     630:	f9 01       	movw	r30, r18
     632:	30 81       	ld	r19, Z
     634:	2b 8d       	ldd	r18, Y+27	; 0x1b
     636:	23 2b       	or	r18, r19
     638:	fc 01       	movw	r30, r24
     63a:	20 83       	st	Z, r18
     63c:	32 c0       	rjmp	.+100    	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     63e:	89 8d       	ldd	r24, Y+25	; 0x19
     640:	9a 8d       	ldd	r25, Y+26	; 0x1a
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	29 8d       	ldd	r18, Y+25	; 0x19
     646:	3a 8d       	ldd	r19, Y+26	; 0x1a
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	f9 01       	movw	r30, r18
     64e:	20 81       	ld	r18, Z
     650:	32 2f       	mov	r19, r18
     652:	2b 8d       	ldd	r18, Y+27	; 0x1b
     654:	20 95       	com	r18
     656:	23 23       	and	r18, r19
     658:	fc 01       	movw	r30, r24
     65a:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     65c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     65e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     660:	84 70       	andi	r24, 0x04	; 4
     662:	99 27       	eor	r25, r25
     664:	89 2b       	or	r24, r25
     666:	71 f0       	breq	.+28     	; 0x684 <__LOCK_REGION_LENGTH__+0x284>
			*((uint8_t *)port + 2) |= pin_mask;
     668:	89 8d       	ldd	r24, Y+25	; 0x19
     66a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     66c:	02 96       	adiw	r24, 0x02	; 2
     66e:	29 8d       	ldd	r18, Y+25	; 0x19
     670:	3a 8d       	ldd	r19, Y+26	; 0x1a
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	f9 01       	movw	r30, r18
     678:	30 81       	ld	r19, Z
     67a:	2b 8d       	ldd	r18, Y+27	; 0x1b
     67c:	23 2b       	or	r18, r19
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
     682:	0f c0       	rjmp	.+30     	; 0x6a2 <__LOCK_REGION_LENGTH__+0x2a2>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     684:	89 8d       	ldd	r24, Y+25	; 0x19
     686:	9a 8d       	ldd	r25, Y+26	; 0x1a
     688:	02 96       	adiw	r24, 0x02	; 2
     68a:	29 8d       	ldd	r18, Y+25	; 0x19
     68c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     68e:	2e 5f       	subi	r18, 0xFE	; 254
     690:	3f 4f       	sbci	r19, 0xFF	; 255
     692:	f9 01       	movw	r30, r18
     694:	20 81       	ld	r18, Z
     696:	32 2f       	mov	r19, r18
     698:	2b 8d       	ldd	r18, Y+27	; 0x1b
     69a:	20 95       	com	r18
     69c:	23 23       	and	r18, r19
     69e:	fc 01       	movw	r30, r24
     6a0:	20 83       	st	Z, r18
     6a2:	8a e0       	ldi	r24, 0x0A	; 10
     6a4:	8d 83       	std	Y+5, r24	; 0x05
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	9f 83       	std	Y+7, r25	; 0x07
     6ac:	8e 83       	std	Y+6, r24	; 0x06
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     6ae:	8d 81       	ldd	r24, Y+5	; 0x05
     6b0:	88 2f       	mov	r24, r24
     6b2:	90 e0       	ldi	r25, 0x00	; 0
     6b4:	99 87       	std	Y+9, r25	; 0x09
     6b6:	88 87       	std	Y+8, r24	; 0x08
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     6b8:	88 85       	ldd	r24, Y+8	; 0x08
     6ba:	99 85       	ldd	r25, Y+9	; 0x09
     6bc:	9c 01       	movw	r18, r24
     6be:	27 70       	andi	r18, 0x07	; 7
     6c0:	33 27       	eor	r19, r19
     6c2:	81 e0       	ldi	r24, 0x01	; 1
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	02 c0       	rjmp	.+4      	; 0x6cc <__LOCK_REGION_LENGTH__+0x2cc>
     6c8:	88 0f       	add	r24, r24
     6ca:	99 1f       	adc	r25, r25
     6cc:	2a 95       	dec	r18
     6ce:	e2 f7       	brpl	.-8      	; 0x6c8 <__LOCK_REGION_LENGTH__+0x2c8>
     6d0:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     6d2:	8d 81       	ldd	r24, Y+5	; 0x05
     6d4:	88 2f       	mov	r24, r24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9b 87       	std	Y+11, r25	; 0x0b
     6da:	8a 87       	std	Y+10, r24	; 0x0a
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
     6dc:	8a 85       	ldd	r24, Y+10	; 0x0a
     6de:	9b 85       	ldd	r25, Y+11	; 0x0b
     6e0:	96 95       	lsr	r25
     6e2:	87 95       	ror	r24
     6e4:	96 95       	lsr	r25
     6e6:	87 95       	ror	r24
     6e8:	96 95       	lsr	r25
     6ea:	87 95       	ror	r24
     6ec:	8c 87       	std	Y+12, r24	; 0x0c
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     6ee:	8c 85       	ldd	r24, Y+12	; 0x0c
     6f0:	28 2f       	mov	r18, r24
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	c9 01       	movw	r24, r18
     6f6:	88 0f       	add	r24, r24
     6f8:	99 1f       	adc	r25, r25
     6fa:	82 0f       	add	r24, r18
     6fc:	93 1f       	adc	r25, r19
     6fe:	80 96       	adiw	r24, 0x20	; 32
     700:	9e 87       	std	Y+14, r25	; 0x0e
     702:	8d 87       	std	Y+13, r24	; 0x0d
     704:	4f 87       	std	Y+15, r20	; 0x0f
     706:	8e 81       	ldd	r24, Y+6	; 0x06
     708:	9f 81       	ldd	r25, Y+7	; 0x07
     70a:	99 8b       	std	Y+17, r25	; 0x11
     70c:	88 8b       	std	Y+16, r24	; 0x10
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     70e:	88 89       	ldd	r24, Y+16	; 0x10
     710:	99 89       	ldd	r25, Y+17	; 0x11
     712:	81 70       	andi	r24, 0x01	; 1
     714:	99 27       	eor	r25, r25
     716:	89 2b       	or	r24, r25
     718:	89 f1       	breq	.+98     	; 0x77c <__LOCK_REGION_LENGTH__+0x37c>
		if (flags & IOPORT_INIT_HIGH) {
     71a:	88 89       	ldd	r24, Y+16	; 0x10
     71c:	99 89       	ldd	r25, Y+17	; 0x11
     71e:	82 70       	andi	r24, 0x02	; 2
     720:	99 27       	eor	r25, r25
     722:	89 2b       	or	r24, r25
     724:	71 f0       	breq	.+28     	; 0x742 <__LOCK_REGION_LENGTH__+0x342>
			*((uint8_t *)port + 2) |= pin_mask;
     726:	8d 85       	ldd	r24, Y+13	; 0x0d
     728:	9e 85       	ldd	r25, Y+14	; 0x0e
     72a:	02 96       	adiw	r24, 0x02	; 2
     72c:	2d 85       	ldd	r18, Y+13	; 0x0d
     72e:	3e 85       	ldd	r19, Y+14	; 0x0e
     730:	2e 5f       	subi	r18, 0xFE	; 254
     732:	3f 4f       	sbci	r19, 0xFF	; 255
     734:	f9 01       	movw	r30, r18
     736:	30 81       	ld	r19, Z
     738:	2f 85       	ldd	r18, Y+15	; 0x0f
     73a:	23 2b       	or	r18, r19
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
     740:	0f c0       	rjmp	.+30     	; 0x760 <__LOCK_REGION_LENGTH__+0x360>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     742:	8d 85       	ldd	r24, Y+13	; 0x0d
     744:	9e 85       	ldd	r25, Y+14	; 0x0e
     746:	02 96       	adiw	r24, 0x02	; 2
     748:	2d 85       	ldd	r18, Y+13	; 0x0d
     74a:	3e 85       	ldd	r19, Y+14	; 0x0e
     74c:	2e 5f       	subi	r18, 0xFE	; 254
     74e:	3f 4f       	sbci	r19, 0xFF	; 255
     750:	f9 01       	movw	r30, r18
     752:	20 81       	ld	r18, Z
     754:	32 2f       	mov	r19, r18
     756:	2f 85       	ldd	r18, Y+15	; 0x0f
     758:	20 95       	com	r18
     75a:	23 23       	and	r18, r19
     75c:	fc 01       	movw	r30, r24
     75e:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
     760:	8d 85       	ldd	r24, Y+13	; 0x0d
     762:	9e 85       	ldd	r25, Y+14	; 0x0e
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	2d 85       	ldd	r18, Y+13	; 0x0d
     768:	3e 85       	ldd	r19, Y+14	; 0x0e
     76a:	2f 5f       	subi	r18, 0xFF	; 255
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	f9 01       	movw	r30, r18
     770:	30 81       	ld	r19, Z
     772:	2f 85       	ldd	r18, Y+15	; 0x0f
     774:	23 2b       	or	r18, r19
     776:	fc 01       	movw	r30, r24
     778:	20 83       	st	Z, r18
	ioport_configure_pin(GPIO_PUSH_BUTTON_0, IOPORT_DIR_INPUT | IOPORT_PULL_UP);

	ioport_configure_pin(ZERO_CROSSING_PIN, IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	ioport_configure_pin(FAN1_DRIVE_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);
	ioport_configure_pin(FAN2_DRIVE_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);	
}
     77a:	32 c0       	rjmp	.+100    	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     77c:	8d 85       	ldd	r24, Y+13	; 0x0d
     77e:	9e 85       	ldd	r25, Y+14	; 0x0e
     780:	01 96       	adiw	r24, 0x01	; 1
     782:	2d 85       	ldd	r18, Y+13	; 0x0d
     784:	3e 85       	ldd	r19, Y+14	; 0x0e
     786:	2f 5f       	subi	r18, 0xFF	; 255
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	32 2f       	mov	r19, r18
     790:	2f 85       	ldd	r18, Y+15	; 0x0f
     792:	20 95       	com	r18
     794:	23 23       	and	r18, r19
     796:	fc 01       	movw	r30, r24
     798:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
     79a:	88 89       	ldd	r24, Y+16	; 0x10
     79c:	99 89       	ldd	r25, Y+17	; 0x11
     79e:	84 70       	andi	r24, 0x04	; 4
     7a0:	99 27       	eor	r25, r25
     7a2:	89 2b       	or	r24, r25
     7a4:	71 f0       	breq	.+28     	; 0x7c2 <__LOCK_REGION_LENGTH__+0x3c2>
			*((uint8_t *)port + 2) |= pin_mask;
     7a6:	8d 85       	ldd	r24, Y+13	; 0x0d
     7a8:	9e 85       	ldd	r25, Y+14	; 0x0e
     7aa:	02 96       	adiw	r24, 0x02	; 2
     7ac:	2d 85       	ldd	r18, Y+13	; 0x0d
     7ae:	3e 85       	ldd	r19, Y+14	; 0x0e
     7b0:	2e 5f       	subi	r18, 0xFE	; 254
     7b2:	3f 4f       	sbci	r19, 0xFF	; 255
     7b4:	f9 01       	movw	r30, r18
     7b6:	30 81       	ld	r19, Z
     7b8:	2f 85       	ldd	r18, Y+15	; 0x0f
     7ba:	23 2b       	or	r18, r19
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
     7c0:	0f c0       	rjmp	.+30     	; 0x7e0 <__LOCK_REGION_LENGTH__+0x3e0>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     7c2:	8d 85       	ldd	r24, Y+13	; 0x0d
     7c4:	9e 85       	ldd	r25, Y+14	; 0x0e
     7c6:	02 96       	adiw	r24, 0x02	; 2
     7c8:	2d 85       	ldd	r18, Y+13	; 0x0d
     7ca:	3e 85       	ldd	r19, Y+14	; 0x0e
     7cc:	2e 5f       	subi	r18, 0xFE	; 254
     7ce:	3f 4f       	sbci	r19, 0xFF	; 255
     7d0:	f9 01       	movw	r30, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	32 2f       	mov	r19, r18
     7d6:	2f 85       	ldd	r18, Y+15	; 0x0f
     7d8:	20 95       	com	r18
     7da:	23 23       	and	r18, r19
     7dc:	fc 01       	movw	r30, r24
     7de:	20 83       	st	Z, r18
     7e0:	00 00       	nop
     7e2:	cf 5b       	subi	r28, 0xBF	; 191
     7e4:	df 4f       	sbci	r29, 0xFF	; 255
     7e6:	0f b6       	in	r0, 0x3f	; 63
     7e8:	f8 94       	cli
     7ea:	de bf       	out	0x3e, r29	; 62
     7ec:	0f be       	out	0x3f, r0	; 63
     7ee:	cd bf       	out	0x3d, r28	; 61
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <led_blink>:

void led_blink(uint8_t blink_count, uint32_t on_off_cycle_period_ms)
{
     7f6:	2f 92       	push	r2
     7f8:	3f 92       	push	r3
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	0f 93       	push	r16
     814:	1f 93       	push	r17
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	cd b7       	in	r28, 0x3d	; 61
     81c:	de b7       	in	r29, 0x3e	; 62
     81e:	6d 97       	sbiw	r28, 0x1d	; 29
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	f8 94       	cli
     824:	de bf       	out	0x3e, r29	; 62
     826:	0f be       	out	0x3f, r0	; 63
     828:	cd bf       	out	0x3d, r28	; 61
     82a:	89 8f       	std	Y+25, r24	; 0x19
     82c:	4a 8f       	std	Y+26, r20	; 0x1a
     82e:	5b 8f       	std	Y+27, r21	; 0x1b
     830:	6c 8f       	std	Y+28, r22	; 0x1c
     832:	7d 8f       	std	Y+29, r23	; 0x1d
	while (blink_count > 0)
     834:	ea c1       	rjmp	.+980    	; 0xc0a <__stack+0x30b>
     836:	8d e0       	ldi	r24, 0x0D	; 13
     838:	8a 83       	std	Y+2, r24	; 0x02
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	8b 83       	std	Y+3, r24	; 0x03
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
__always_inline static inline void ioport_set_value(port_pin_t pin, bool value)
{
	arch_ioport_set_pin_level(pin, value);
     83e:	8a 81       	ldd	r24, Y+2	; 0x02
     840:	88 2f       	mov	r24, r24
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	9d 83       	std	Y+5, r25	; 0x05
     846:	8c 83       	std	Y+4, r24	; 0x04
     848:	8b 81       	ldd	r24, Y+3	; 0x03
     84a:	8e 83       	std	Y+6, r24	; 0x06
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     84c:	8c 81       	ldd	r24, Y+4	; 0x04
     84e:	9d 81       	ldd	r25, Y+5	; 0x05
     850:	96 95       	lsr	r25
     852:	87 95       	ror	r24
     854:	96 95       	lsr	r25
     856:	87 95       	ror	r24
     858:	96 95       	lsr	r25
     85a:	87 95       	ror	r24
     85c:	8f 83       	std	Y+7, r24	; 0x07
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     85e:	8f 81       	ldd	r24, Y+7	; 0x07
     860:	28 2f       	mov	r18, r24
     862:	30 e0       	ldi	r19, 0x00	; 0
     864:	c9 01       	movw	r24, r18
     866:	88 0f       	add	r24, r24
     868:	99 1f       	adc	r25, r25
     86a:	82 0f       	add	r24, r18
     86c:	93 1f       	adc	r25, r19
     86e:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     870:	99 87       	std	Y+9, r25	; 0x09
     872:	88 87       	std	Y+8, r24	; 0x08

	if (level) {
     874:	8e 81       	ldd	r24, Y+6	; 0x06
     876:	88 23       	and	r24, r24
     878:	d9 f0       	breq	.+54     	; 0x8b0 <led_blink+0xba>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     87a:	88 85       	ldd	r24, Y+8	; 0x08
     87c:	99 85       	ldd	r25, Y+9	; 0x09
     87e:	fc 01       	movw	r30, r24
     880:	42 81       	ldd	r20, Z+2	; 0x02
     882:	8c 81       	ldd	r24, Y+4	; 0x04
     884:	9d 81       	ldd	r25, Y+5	; 0x05
     886:	9b 87       	std	Y+11, r25	; 0x0b
     888:	8a 87       	std	Y+10, r24	; 0x0a
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     88a:	8a 85       	ldd	r24, Y+10	; 0x0a
     88c:	9b 85       	ldd	r25, Y+11	; 0x0b
     88e:	9c 01       	movw	r18, r24
     890:	27 70       	andi	r18, 0x07	; 7
     892:	33 27       	eor	r19, r19
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	02 c0       	rjmp	.+4      	; 0x89e <led_blink+0xa8>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	2a 95       	dec	r18
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <led_blink+0xa4>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     8a2:	24 2f       	mov	r18, r20
     8a4:	28 2b       	or	r18, r24
     8a6:	88 85       	ldd	r24, Y+8	; 0x08
     8a8:	99 85       	ldd	r25, Y+9	; 0x09
     8aa:	fc 01       	movw	r30, r24
     8ac:	22 83       	std	Z+2, r18	; 0x02
     8ae:	1c c0       	rjmp	.+56     	; 0x8e8 <led_blink+0xf2>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     8b0:	88 85       	ldd	r24, Y+8	; 0x08
     8b2:	99 85       	ldd	r25, Y+9	; 0x09
     8b4:	fc 01       	movw	r30, r24
     8b6:	82 81       	ldd	r24, Z+2	; 0x02
     8b8:	48 2f       	mov	r20, r24
     8ba:	8c 81       	ldd	r24, Y+4	; 0x04
     8bc:	9d 81       	ldd	r25, Y+5	; 0x05
     8be:	9d 87       	std	Y+13, r25	; 0x0d
     8c0:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     8c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     8c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     8c6:	9c 01       	movw	r18, r24
     8c8:	27 70       	andi	r18, 0x07	; 7
     8ca:	33 27       	eor	r19, r19
     8cc:	81 e0       	ldi	r24, 0x01	; 1
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <led_blink+0xe0>
     8d2:	88 0f       	add	r24, r24
     8d4:	99 1f       	adc	r25, r25
     8d6:	2a 95       	dec	r18
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <led_blink+0xdc>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     8da:	80 95       	com	r24
     8dc:	84 23       	and	r24, r20
     8de:	28 2f       	mov	r18, r24
     8e0:	88 85       	ldd	r24, Y+8	; 0x08
     8e2:	99 85       	ldd	r25, Y+9	; 0x09
     8e4:	fc 01       	movw	r30, r24
     8e6:	22 83       	std	Z+2, r18	; 0x02
	{
		LED_On(LED_PIN);
		delay_ms(on_off_cycle_period_ms/2);
     8e8:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8ea:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8ec:	ac 8d       	ldd	r26, Y+28	; 0x1c
     8ee:	bd 8d       	ldd	r27, Y+29	; 0x1d
     8f0:	02 97       	sbiw	r24, 0x02	; 2
     8f2:	a1 05       	cpc	r26, r1
     8f4:	b1 05       	cpc	r27, r1
     8f6:	08 f4       	brcc	.+2      	; 0x8fa <led_blink+0x104>
     8f8:	8d c0       	rjmp	.+282    	; 0xa14 <__stack+0x115>
     8fa:	8a 8d       	ldd	r24, Y+26	; 0x1a
     8fc:	9b 8d       	ldd	r25, Y+27	; 0x1b
     8fe:	ac 8d       	ldd	r26, Y+28	; 0x1c
     900:	bd 8d       	ldd	r27, Y+29	; 0x1d
     902:	b6 95       	lsr	r27
     904:	a7 95       	ror	r26
     906:	97 95       	ror	r25
     908:	87 95       	ror	r24
     90a:	1c 01       	movw	r2, r24
     90c:	2d 01       	movw	r4, r26
     90e:	61 2c       	mov	r6, r1
     910:	71 2c       	mov	r7, r1
     912:	43 01       	movw	r8, r6
     914:	a1 2c       	mov	r10, r1
     916:	0f 2e       	mov	r0, r31
     918:	f2 e1       	ldi	r31, 0x12	; 18
     91a:	bf 2e       	mov	r11, r31
     91c:	f0 2d       	mov	r31, r0
     91e:	0f 2e       	mov	r0, r31
     920:	fa e7       	ldi	r31, 0x7A	; 122
     922:	cf 2e       	mov	r12, r31
     924:	f0 2d       	mov	r31, r0
     926:	d1 2c       	mov	r13, r1
     928:	e1 2c       	mov	r14, r1
     92a:	f1 2c       	mov	r15, r1
     92c:	00 e0       	ldi	r16, 0x00	; 0
     92e:	10 e0       	ldi	r17, 0x00	; 0
     930:	22 2d       	mov	r18, r2
     932:	33 2d       	mov	r19, r3
     934:	44 2d       	mov	r20, r4
     936:	55 2d       	mov	r21, r5
     938:	66 2d       	mov	r22, r6
     93a:	77 2d       	mov	r23, r7
     93c:	88 2d       	mov	r24, r8
     93e:	99 2d       	mov	r25, r9
     940:	63 d3       	rcall	.+1734   	; 0x1008 <__muldi3>
     942:	a2 2e       	mov	r10, r18
     944:	b3 2e       	mov	r11, r19
     946:	c4 2e       	mov	r12, r20
     948:	d5 2e       	mov	r13, r21
     94a:	e6 2e       	mov	r14, r22
     94c:	f7 2e       	mov	r15, r23
     94e:	08 2f       	mov	r16, r24
     950:	19 2f       	mov	r17, r25
     952:	2a 2c       	mov	r2, r10
     954:	3b 2c       	mov	r3, r11
     956:	4c 2c       	mov	r4, r12
     958:	5d 2c       	mov	r5, r13
     95a:	6e 2c       	mov	r6, r14
     95c:	7f 2c       	mov	r7, r15
     95e:	80 2e       	mov	r8, r16
     960:	91 2e       	mov	r9, r17
     962:	0f 2e       	mov	r0, r31
     964:	f6 e0       	ldi	r31, 0x06	; 6
     966:	af 2e       	mov	r10, r31
     968:	f0 2d       	mov	r31, r0
     96a:	b1 2c       	mov	r11, r1
     96c:	c1 2c       	mov	r12, r1
     96e:	d1 2c       	mov	r13, r1
     970:	e1 2c       	mov	r14, r1
     972:	f1 2c       	mov	r15, r1
     974:	00 e0       	ldi	r16, 0x00	; 0
     976:	10 e0       	ldi	r17, 0x00	; 0
     978:	22 2d       	mov	r18, r2
     97a:	33 2d       	mov	r19, r3
     97c:	44 2d       	mov	r20, r4
     97e:	55 2d       	mov	r21, r5
     980:	66 2d       	mov	r22, r6
     982:	77 2d       	mov	r23, r7
     984:	88 2d       	mov	r24, r8
     986:	99 2d       	mov	r25, r9
     988:	92 d3       	rcall	.+1828   	; 0x10ae <__udivdi3>
     98a:	22 2e       	mov	r2, r18
     98c:	33 2e       	mov	r3, r19
     98e:	44 2e       	mov	r4, r20
     990:	55 2e       	mov	r5, r21
     992:	66 2e       	mov	r6, r22
     994:	77 2e       	mov	r7, r23
     996:	88 2e       	mov	r8, r24
     998:	99 2e       	mov	r9, r25
     99a:	a2 2c       	mov	r10, r2
     99c:	b3 2c       	mov	r11, r3
     99e:	c4 2c       	mov	r12, r4
     9a0:	d5 2c       	mov	r13, r5
     9a2:	e6 2c       	mov	r14, r6
     9a4:	f7 2c       	mov	r15, r7
     9a6:	08 2d       	mov	r16, r8
     9a8:	19 2d       	mov	r17, r9
     9aa:	2a 2d       	mov	r18, r10
     9ac:	3b 2d       	mov	r19, r11
     9ae:	4c 2d       	mov	r20, r12
     9b0:	5d 2d       	mov	r21, r13
     9b2:	6e 2d       	mov	r22, r14
     9b4:	7f 2d       	mov	r23, r15
     9b6:	80 2f       	mov	r24, r16
     9b8:	91 2f       	mov	r25, r17
     9ba:	29 51       	subi	r18, 0x19	; 25
     9bc:	3c 4f       	sbci	r19, 0xFC	; 252
     9be:	4f 4f       	sbci	r20, 0xFF	; 255
     9c0:	5f 4f       	sbci	r21, 0xFF	; 255
     9c2:	6f 4f       	sbci	r22, 0xFF	; 255
     9c4:	7f 4f       	sbci	r23, 0xFF	; 255
     9c6:	8f 4f       	sbci	r24, 0xFF	; 255
     9c8:	9f 4f       	sbci	r25, 0xFF	; 255
     9ca:	a2 2e       	mov	r10, r18
     9cc:	b3 2e       	mov	r11, r19
     9ce:	c4 2e       	mov	r12, r20
     9d0:	d5 2e       	mov	r13, r21
     9d2:	e6 2e       	mov	r14, r22
     9d4:	f7 2e       	mov	r15, r23
     9d6:	08 2f       	mov	r16, r24
     9d8:	19 2f       	mov	r17, r25
     9da:	2a 2d       	mov	r18, r10
     9dc:	3b 2d       	mov	r19, r11
     9de:	4c 2d       	mov	r20, r12
     9e0:	5d 2d       	mov	r21, r13
     9e2:	6e 2d       	mov	r22, r14
     9e4:	7f 2d       	mov	r23, r15
     9e6:	80 2f       	mov	r24, r16
     9e8:	91 2f       	mov	r25, r17
     9ea:	7f d2       	rcall	.+1278   	; 0xeea <__floatundisf>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	4a e7       	ldi	r20, 0x7A	; 122
     9f6:	54 e4       	ldi	r21, 0x44	; 68
     9f8:	bc 01       	movw	r22, r24
     9fa:	cd 01       	movw	r24, r26
     9fc:	e2 d1       	rcall	.+964    	; 0xdc2 <__divsf3>
     9fe:	dc 01       	movw	r26, r24
     a00:	cb 01       	movw	r24, r22
     a02:	bc 01       	movw	r22, r24
     a04:	cd 01       	movw	r24, r26
     a06:	45 d2       	rcall	.+1162   	; 0xe92 <__fixunssfsi>
     a08:	dc 01       	movw	r26, r24
     a0a:	cb 01       	movw	r24, r22
     a0c:	bc 01       	movw	r22, r24
     a0e:	cd 01       	movw	r24, r26
     a10:	a6 db       	rcall	.-2228   	; 0x15e <__portable_avr_delay_cycles>
     a12:	05 c0       	rjmp	.+10     	; 0xa1e <__stack+0x11f>
     a14:	62 e0       	ldi	r22, 0x02	; 2
     a16:	70 e0       	ldi	r23, 0x00	; 0
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	a0 db       	rcall	.-2240   	; 0x15e <__portable_avr_delay_cycles>
     a1e:	8d e0       	ldi	r24, 0x0D	; 13
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	1e 86       	std	Y+14, r1	; 0x0e
     a24:	89 81       	ldd	r24, Y+1	; 0x01
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
__always_inline static inline void ioport_set_value(port_pin_t pin, bool value)
{
	arch_ioport_set_pin_level(pin, value);
     a26:	88 2f       	mov	r24, r24
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	98 8b       	std	Y+16, r25	; 0x10
     a2c:	8f 87       	std	Y+15, r24	; 0x0f
     a2e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a30:	89 8b       	std	Y+17, r24	; 0x11
     a32:	8f 85       	ldd	r24, Y+15	; 0x0f
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     a34:	98 89       	ldd	r25, Y+16	; 0x10
     a36:	96 95       	lsr	r25
     a38:	87 95       	ror	r24
     a3a:	96 95       	lsr	r25
     a3c:	87 95       	ror	r24
     a3e:	96 95       	lsr	r25
     a40:	87 95       	ror	r24
     a42:	8a 8b       	std	Y+18, r24	; 0x12
     a44:	8a 89       	ldd	r24, Y+18	; 0x12
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
     a46:	28 2f       	mov	r18, r24
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	c9 01       	movw	r24, r18
     a4c:	88 0f       	add	r24, r24
     a4e:	99 1f       	adc	r25, r25
     a50:	82 0f       	add	r24, r18
     a52:	93 1f       	adc	r25, r19
     a54:	80 96       	adiw	r24, 0x20	; 32
     a56:	9c 8b       	std	Y+20, r25	; 0x14
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
     a58:	8b 8b       	std	Y+19, r24	; 0x13
     a5a:	89 89       	ldd	r24, Y+17	; 0x11

	if (level) {
     a5c:	88 23       	and	r24, r24
     a5e:	d9 f0       	breq	.+54     	; 0xa96 <__stack+0x197>
     a60:	8b 89       	ldd	r24, Y+19	; 0x13
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     a62:	9c 89       	ldd	r25, Y+20	; 0x14
     a64:	fc 01       	movw	r30, r24
     a66:	42 81       	ldd	r20, Z+2	; 0x02
     a68:	8f 85       	ldd	r24, Y+15	; 0x0f
     a6a:	98 89       	ldd	r25, Y+16	; 0x10
     a6c:	9e 8b       	std	Y+22, r25	; 0x16
     a6e:	8d 8b       	std	Y+21, r24	; 0x15
     a70:	8d 89       	ldd	r24, Y+21	; 0x15
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     a72:	9e 89       	ldd	r25, Y+22	; 0x16
     a74:	9c 01       	movw	r18, r24
     a76:	27 70       	andi	r18, 0x07	; 7
     a78:	33 27       	eor	r19, r19
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	02 c0       	rjmp	.+4      	; 0xa84 <__stack+0x185>
     a80:	88 0f       	add	r24, r24
     a82:	99 1f       	adc	r25, r25
     a84:	2a 95       	dec	r18
     a86:	e2 f7       	brpl	.-8      	; 0xa80 <__stack+0x181>
     a88:	24 2f       	mov	r18, r20
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
     a8a:	28 2b       	or	r18, r24
     a8c:	8b 89       	ldd	r24, Y+19	; 0x13
     a8e:	9c 89       	ldd	r25, Y+20	; 0x14
     a90:	fc 01       	movw	r30, r24
     a92:	22 83       	std	Z+2, r18	; 0x02
     a94:	1c c0       	rjmp	.+56     	; 0xace <__stack+0x1cf>
     a96:	8b 89       	ldd	r24, Y+19	; 0x13
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     a98:	9c 89       	ldd	r25, Y+20	; 0x14
     a9a:	fc 01       	movw	r30, r24
     a9c:	82 81       	ldd	r24, Z+2	; 0x02
     a9e:	48 2f       	mov	r20, r24
     aa0:	8f 85       	ldd	r24, Y+15	; 0x0f
     aa2:	98 89       	ldd	r25, Y+16	; 0x10
     aa4:	98 8f       	std	Y+24, r25	; 0x18
     aa6:	8f 8b       	std	Y+23, r24	; 0x17
     aa8:	8f 89       	ldd	r24, Y+23	; 0x17
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
     aaa:	98 8d       	ldd	r25, Y+24	; 0x18
     aac:	9c 01       	movw	r18, r24
     aae:	27 70       	andi	r18, 0x07	; 7
     ab0:	33 27       	eor	r19, r19
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	02 c0       	rjmp	.+4      	; 0xabc <__stack+0x1bd>
     ab8:	88 0f       	add	r24, r24
     aba:	99 1f       	adc	r25, r25
     abc:	2a 95       	dec	r18
     abe:	e2 f7       	brpl	.-8      	; 0xab8 <__stack+0x1b9>
     ac0:	80 95       	com	r24
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
     ac2:	84 23       	and	r24, r20
     ac4:	28 2f       	mov	r18, r24
     ac6:	8b 89       	ldd	r24, Y+19	; 0x13
     ac8:	9c 89       	ldd	r25, Y+20	; 0x14
     aca:	fc 01       	movw	r30, r24
     acc:	22 83       	std	Z+2, r18	; 0x02
     ace:	8a 8d       	ldd	r24, Y+26	; 0x1a
		LED_Off(LED_PIN);
		delay_ms(on_off_cycle_period_ms/2);
     ad0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ad2:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ad4:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ad6:	02 97       	sbiw	r24, 0x02	; 2
     ad8:	a1 05       	cpc	r26, r1
     ada:	b1 05       	cpc	r27, r1
     adc:	08 f4       	brcc	.+2      	; 0xae0 <__stack+0x1e1>
     ade:	8d c0       	rjmp	.+282    	; 0xbfa <__stack+0x2fb>
     ae0:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ae2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     ae4:	ac 8d       	ldd	r26, Y+28	; 0x1c
     ae6:	bd 8d       	ldd	r27, Y+29	; 0x1d
     ae8:	b6 95       	lsr	r27
     aea:	a7 95       	ror	r26
     aec:	97 95       	ror	r25
     aee:	87 95       	ror	r24
     af0:	1c 01       	movw	r2, r24
     af2:	2d 01       	movw	r4, r26
     af4:	61 2c       	mov	r6, r1
     af6:	71 2c       	mov	r7, r1
     af8:	43 01       	movw	r8, r6
     afa:	a1 2c       	mov	r10, r1
     afc:	0f 2e       	mov	r0, r31
     afe:	f2 e1       	ldi	r31, 0x12	; 18
     b00:	bf 2e       	mov	r11, r31
     b02:	f0 2d       	mov	r31, r0
     b04:	0f 2e       	mov	r0, r31
     b06:	fa e7       	ldi	r31, 0x7A	; 122
     b08:	cf 2e       	mov	r12, r31
     b0a:	f0 2d       	mov	r31, r0
     b0c:	d1 2c       	mov	r13, r1
     b0e:	e1 2c       	mov	r14, r1
     b10:	f1 2c       	mov	r15, r1
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	22 2d       	mov	r18, r2
     b18:	33 2d       	mov	r19, r3
     b1a:	44 2d       	mov	r20, r4
     b1c:	55 2d       	mov	r21, r5
     b1e:	66 2d       	mov	r22, r6
     b20:	77 2d       	mov	r23, r7
     b22:	88 2d       	mov	r24, r8
     b24:	99 2d       	mov	r25, r9
     b26:	70 d2       	rcall	.+1248   	; 0x1008 <__muldi3>
     b28:	a2 2e       	mov	r10, r18
     b2a:	b3 2e       	mov	r11, r19
     b2c:	c4 2e       	mov	r12, r20
     b2e:	d5 2e       	mov	r13, r21
     b30:	e6 2e       	mov	r14, r22
     b32:	f7 2e       	mov	r15, r23
     b34:	08 2f       	mov	r16, r24
     b36:	19 2f       	mov	r17, r25
     b38:	2a 2c       	mov	r2, r10
     b3a:	3b 2c       	mov	r3, r11
     b3c:	4c 2c       	mov	r4, r12
     b3e:	5d 2c       	mov	r5, r13
     b40:	6e 2c       	mov	r6, r14
     b42:	7f 2c       	mov	r7, r15
     b44:	80 2e       	mov	r8, r16
     b46:	91 2e       	mov	r9, r17
     b48:	0f 2e       	mov	r0, r31
     b4a:	f6 e0       	ldi	r31, 0x06	; 6
     b4c:	af 2e       	mov	r10, r31
     b4e:	f0 2d       	mov	r31, r0
     b50:	b1 2c       	mov	r11, r1
     b52:	c1 2c       	mov	r12, r1
     b54:	d1 2c       	mov	r13, r1
     b56:	e1 2c       	mov	r14, r1
     b58:	f1 2c       	mov	r15, r1
     b5a:	00 e0       	ldi	r16, 0x00	; 0
     b5c:	10 e0       	ldi	r17, 0x00	; 0
     b5e:	22 2d       	mov	r18, r2
     b60:	33 2d       	mov	r19, r3
     b62:	44 2d       	mov	r20, r4
     b64:	55 2d       	mov	r21, r5
     b66:	66 2d       	mov	r22, r6
     b68:	77 2d       	mov	r23, r7
     b6a:	88 2d       	mov	r24, r8
     b6c:	99 2d       	mov	r25, r9
     b6e:	9f d2       	rcall	.+1342   	; 0x10ae <__udivdi3>
     b70:	22 2e       	mov	r2, r18
     b72:	33 2e       	mov	r3, r19
     b74:	44 2e       	mov	r4, r20
     b76:	55 2e       	mov	r5, r21
     b78:	66 2e       	mov	r6, r22
     b7a:	77 2e       	mov	r7, r23
     b7c:	88 2e       	mov	r8, r24
     b7e:	99 2e       	mov	r9, r25
     b80:	a2 2c       	mov	r10, r2
     b82:	b3 2c       	mov	r11, r3
     b84:	c4 2c       	mov	r12, r4
     b86:	d5 2c       	mov	r13, r5
     b88:	e6 2c       	mov	r14, r6
     b8a:	f7 2c       	mov	r15, r7
     b8c:	08 2d       	mov	r16, r8
     b8e:	19 2d       	mov	r17, r9
     b90:	2a 2d       	mov	r18, r10
     b92:	3b 2d       	mov	r19, r11
     b94:	4c 2d       	mov	r20, r12
     b96:	5d 2d       	mov	r21, r13
     b98:	6e 2d       	mov	r22, r14
     b9a:	7f 2d       	mov	r23, r15
     b9c:	80 2f       	mov	r24, r16
     b9e:	91 2f       	mov	r25, r17
     ba0:	29 51       	subi	r18, 0x19	; 25
     ba2:	3c 4f       	sbci	r19, 0xFC	; 252
     ba4:	4f 4f       	sbci	r20, 0xFF	; 255
     ba6:	5f 4f       	sbci	r21, 0xFF	; 255
     ba8:	6f 4f       	sbci	r22, 0xFF	; 255
     baa:	7f 4f       	sbci	r23, 0xFF	; 255
     bac:	8f 4f       	sbci	r24, 0xFF	; 255
     bae:	9f 4f       	sbci	r25, 0xFF	; 255
     bb0:	a2 2e       	mov	r10, r18
     bb2:	b3 2e       	mov	r11, r19
     bb4:	c4 2e       	mov	r12, r20
     bb6:	d5 2e       	mov	r13, r21
     bb8:	e6 2e       	mov	r14, r22
     bba:	f7 2e       	mov	r15, r23
     bbc:	08 2f       	mov	r16, r24
     bbe:	19 2f       	mov	r17, r25
     bc0:	2a 2d       	mov	r18, r10
     bc2:	3b 2d       	mov	r19, r11
     bc4:	4c 2d       	mov	r20, r12
     bc6:	5d 2d       	mov	r21, r13
     bc8:	6e 2d       	mov	r22, r14
     bca:	7f 2d       	mov	r23, r15
     bcc:	80 2f       	mov	r24, r16
     bce:	91 2f       	mov	r25, r17
     bd0:	8c d1       	rcall	.+792    	; 0xeea <__floatundisf>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	4a e7       	ldi	r20, 0x7A	; 122
     bdc:	54 e4       	ldi	r21, 0x44	; 68
     bde:	bc 01       	movw	r22, r24
     be0:	cd 01       	movw	r24, r26
     be2:	ef d0       	rcall	.+478    	; 0xdc2 <__divsf3>
     be4:	dc 01       	movw	r26, r24
     be6:	cb 01       	movw	r24, r22
     be8:	bc 01       	movw	r22, r24
     bea:	cd 01       	movw	r24, r26
     bec:	52 d1       	rcall	.+676    	; 0xe92 <__fixunssfsi>
     bee:	dc 01       	movw	r26, r24
     bf0:	cb 01       	movw	r24, r22
     bf2:	bc 01       	movw	r22, r24
     bf4:	cd 01       	movw	r24, r26
     bf6:	b3 da       	rcall	.-2714   	; 0x15e <__portable_avr_delay_cycles>
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <__stack+0x305>
     bfa:	62 e0       	ldi	r22, 0x02	; 2
     bfc:	70 e0       	ldi	r23, 0x00	; 0
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	ad da       	rcall	.-2726   	; 0x15e <__portable_avr_delay_cycles>
     c04:	89 8d       	ldd	r24, Y+25	; 0x19
		blink_count--;
     c06:	81 50       	subi	r24, 0x01	; 1
     c08:	89 8f       	std	Y+25, r24	; 0x19
     c0a:	89 8d       	ldd	r24, Y+25	; 0x19
	ioport_configure_pin(FAN2_DRIVE_PIN, IOPORT_DIR_OUTPUT | IOPORT_INIT_LOW);	
}

void led_blink(uint8_t blink_count, uint32_t on_off_cycle_period_ms)
{
	while (blink_count > 0)
     c0c:	88 23       	and	r24, r24
     c0e:	09 f0       	breq	.+2      	; 0xc12 <__stack+0x313>
     c10:	12 ce       	rjmp	.-988    	; 0x836 <led_blink+0x40>
     c12:	00 00       	nop
		delay_ms(on_off_cycle_period_ms/2);
		LED_Off(LED_PIN);
		delay_ms(on_off_cycle_period_ms/2);
		blink_count--;
	}
}
     c14:	6d 96       	adiw	r28, 0x1d	; 29
     c16:	0f b6       	in	r0, 0x3f	; 63
     c18:	f8 94       	cli
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	0f be       	out	0x3f, r0	; 63
     c1e:	cd bf       	out	0x3d, r28	; 61
     c20:	df 91       	pop	r29
     c22:	cf 91       	pop	r28
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	bf 90       	pop	r11
     c32:	af 90       	pop	r10
     c34:	9f 90       	pop	r9
     c36:	8f 90       	pop	r8
     c38:	7f 90       	pop	r7
     c3a:	6f 90       	pop	r6
     c3c:	5f 90       	pop	r5
     c3e:	4f 90       	pop	r4
     c40:	3f 90       	pop	r3
     c42:	2f 90       	pop	r2
     c44:	08 95       	ret

00000c46 <adc_init>:
     c46:	cf 93       	push	r28

void adc_init(void)
{
     c48:	df 93       	push	r29
     c4a:	cd b7       	in	r28, 0x3d	; 61
     c4c:	de b7       	in	r29, 0x3e	; 62
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0); // AVCC with external cap at AREF pin
     c4e:	8c e7       	ldi	r24, 0x7C	; 124
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	2c e7       	ldi	r18, 0x7C	; 124
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	f9 01       	movw	r30, r18
     c58:	20 81       	ld	r18, Z
     c5a:	20 64       	ori	r18, 0x40	; 64
     c5c:	fc 01       	movw	r30, r24
     c5e:	20 83       	st	Z, r18
	// enable ADC
	ADCSRA |= 1<<ADEN;
     c60:	8a e7       	ldi	r24, 0x7A	; 122
     c62:	90 e0       	ldi	r25, 0x00	; 0
     c64:	2a e7       	ldi	r18, 0x7A	; 122
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	f9 01       	movw	r30, r18
     c6a:	20 81       	ld	r18, Z
     c6c:	20 68       	ori	r18, 0x80	; 128
     c6e:	fc 01       	movw	r30, r24
     c70:	20 83       	st	Z, r18
	//set prescaller to 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
     c72:	8a e7       	ldi	r24, 0x7A	; 122
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	2a e7       	ldi	r18, 0x7A	; 122
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	27 60       	ori	r18, 0x07	; 7
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
}
     c84:	00 00       	nop
     c86:	df 91       	pop	r29
     c88:	cf 91       	pop	r28
     c8a:	08 95       	ret

00000c8c <adc_read>:

uint16_t adc_read(uint8_t ADCchannel)
{
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	1f 92       	push	r1
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
     c96:	89 83       	std	Y+1, r24	; 0x01
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
     c98:	8c e7       	ldi	r24, 0x7C	; 124
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	2c e7       	ldi	r18, 0x7C	; 124
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	f9 01       	movw	r30, r18
     ca2:	20 81       	ld	r18, Z
     ca4:	32 2f       	mov	r19, r18
     ca6:	30 7f       	andi	r19, 0xF0	; 240
     ca8:	29 81       	ldd	r18, Y+1	; 0x01
     caa:	2f 70       	andi	r18, 0x0F	; 15
     cac:	23 2b       	or	r18, r19
     cae:	fc 01       	movw	r30, r24
     cb0:	20 83       	st	Z, r18
	//single conversion mode
	ADCSRA |= (1<<ADSC);
     cb2:	8a e7       	ldi	r24, 0x7A	; 122
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	2a e7       	ldi	r18, 0x7A	; 122
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	f9 01       	movw	r30, r18
     cbc:	20 81       	ld	r18, Z
     cbe:	20 64       	ori	r18, 0x40	; 64
     cc0:	fc 01       	movw	r30, r24
     cc2:	20 83       	st	Z, r18
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
     cc4:	00 00       	nop
     cc6:	8a e7       	ldi	r24, 0x7A	; 122
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	88 2f       	mov	r24, r24
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	80 74       	andi	r24, 0x40	; 64
     cd4:	99 27       	eor	r25, r25
     cd6:	89 2b       	or	r24, r25
     cd8:	b1 f7       	brne	.-20     	; 0xcc6 <adc_read+0x3a>
	return ADC;
     cda:	88 e7       	ldi	r24, 0x78	; 120
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	fc 01       	movw	r30, r24
     ce0:	80 81       	ld	r24, Z
     ce2:	91 81       	ldd	r25, Z+1	; 0x01
}
     ce4:	0f 90       	pop	r0
     ce6:	df 91       	pop	r29
     ce8:	cf 91       	pop	r28
     cea:	08 95       	ret

00000cec <zero_crossing_read>:

bool zero_crossing_read(void)
{
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
	return ioport_get_pin_level(ZERO_CROSSING_PIN);
     cf4:	88 e0       	ldi	r24, 0x08	; 8
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	e7 d9       	rcall	.-3122   	; 0xc8 <ioport_get_pin_level>
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <read_sensor_values>:

void read_sensor_values(sensor_values_t * sensor_values)
{
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
     d04:	00 d0       	rcall	.+0      	; 0xd06 <read_sensor_values+0x6>
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
	sensor_values->value_0 = adc_read(0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	bd df       	rcall	.-134    	; 0xc8c <adc_read>
     d12:	9c 01       	movw	r18, r24
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	fc 01       	movw	r30, r24
     d1a:	31 83       	std	Z+1, r19	; 0x01
     d1c:	20 83       	st	Z, r18
	sensor_values->value_1 = adc_read(1);
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	b5 df       	rcall	.-150    	; 0xc8c <adc_read>
     d22:	9c 01       	movw	r18, r24
     d24:	89 81       	ldd	r24, Y+1	; 0x01
     d26:	9a 81       	ldd	r25, Y+2	; 0x02
     d28:	fc 01       	movw	r30, r24
     d2a:	33 83       	std	Z+3, r19	; 0x03
     d2c:	22 83       	std	Z+2, r18	; 0x02
	sensor_values->value_2 = adc_read(2);
     d2e:	82 e0       	ldi	r24, 0x02	; 2
     d30:	ad df       	rcall	.-166    	; 0xc8c <adc_read>
     d32:	9c 01       	movw	r18, r24
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	35 83       	std	Z+5, r19	; 0x05
     d3c:	24 83       	std	Z+4, r18	; 0x04
	sensor_values->value_3 = adc_read(3);
     d3e:	83 e0       	ldi	r24, 0x03	; 3
     d40:	a5 df       	rcall	.-182    	; 0xc8c <adc_read>
     d42:	9c 01       	movw	r18, r24
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	9a 81       	ldd	r25, Y+2	; 0x02
     d48:	fc 01       	movw	r30, r24
     d4a:	37 83       	std	Z+7, r19	; 0x07
     d4c:	26 83       	std	Z+6, r18	; 0x06
	sensor_values->value_4 = adc_read(4);
     d4e:	84 e0       	ldi	r24, 0x04	; 4
     d50:	9d df       	rcall	.-198    	; 0xc8c <adc_read>
     d52:	9c 01       	movw	r18, r24
     d54:	89 81       	ldd	r24, Y+1	; 0x01
     d56:	9a 81       	ldd	r25, Y+2	; 0x02
     d58:	fc 01       	movw	r30, r24
     d5a:	31 87       	std	Z+9, r19	; 0x09
     d5c:	20 87       	std	Z+8, r18	; 0x08
	sensor_values->value_5 = adc_read(5);
     d5e:	85 e0       	ldi	r24, 0x05	; 5
     d60:	95 df       	rcall	.-214    	; 0xc8c <adc_read>
     d62:	9c 01       	movw	r18, r24
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	9a 81       	ldd	r25, Y+2	; 0x02
     d68:	fc 01       	movw	r30, r24
     d6a:	33 87       	std	Z+11, r19	; 0x0b
     d6c:	22 87       	std	Z+10, r18	; 0x0a
     d6e:	00 00       	nop
}
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	df 91       	pop	r29
     d76:	cf 91       	pop	r28
     d78:	08 95       	ret

00000d7a <main>:
     d7a:	cf 93       	push	r28

int main (void)
{
     d7c:	df 93       	push	r29
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	2c 97       	sbiw	r28, 0x0c	; 12
     d84:	0f b6       	in	r0, 0x3f	; 63
     d86:	f8 94       	cli
     d88:	de bf       	out	0x3e, r29	; 62
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	cd bf       	out	0x3d, r28	; 61
	gpio_init();
     d8e:	f2 d9       	rcall	.-3100   	; 0x174 <gpio_init>
	delay_init();
	adc_init();
     d90:	5a df       	rcall	.-332    	; 0xc46 <adc_init>
     d92:	4c e2       	ldi	r20, 0x2C	; 44
	sensor_values_t sensor_values;
	
	led_blink(5, 300);
     d94:	51 e0       	ldi	r21, 0x01	; 1
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	70 e0       	ldi	r23, 0x00	; 0
     d9a:	85 e0       	ldi	r24, 0x05	; 5
     d9c:	2c dd       	rcall	.-1448   	; 0x7f6 <led_blink>
	
	while(1)
	{
		if (zero_crossing_read())
     d9e:	a6 df       	rcall	.-180    	; 0xcec <zero_crossing_read>
     da0:	88 23       	and	r24, r24
     da2:	31 f0       	breq	.+12     	; 0xdb0 <main+0x36>
     da4:	44 ef       	ldi	r20, 0xF4	; 244
			led_blink(1, 500);
     da6:	51 e0       	ldi	r21, 0x01	; 1
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	23 dd       	rcall	.-1466   	; 0x7f6 <led_blink>
			
		read_sensor_values(&sensor_values);
     db0:	ce 01       	movw	r24, r28
     db2:	01 96       	adiw	r24, 0x01	; 1
     db4:	a5 df       	rcall	.-182    	; 0xd00 <read_sensor_values>
		delay_ms(ADC_READ_PERIOD_MS);
     db6:	66 e5       	ldi	r22, 0x56	; 86
     db8:	78 e5       	ldi	r23, 0x58	; 88
     dba:	84 e1       	ldi	r24, 0x14	; 20
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	cf d9       	rcall	.-3170   	; 0x15e <__portable_avr_delay_cycles>
     dc0:	ee cf       	rjmp	.-36     	; 0xd9e <main+0x24>

00000dc2 <__divsf3>:
	}
     dc2:	0c d0       	rcall	.+24     	; 0xddc <__divsf3x>
     dc4:	e7 c0       	rjmp	.+462    	; 0xf94 <__fp_round>
     dc6:	df d0       	rcall	.+446    	; 0xf86 <__fp_pscB>
     dc8:	40 f0       	brcs	.+16     	; 0xdda <__divsf3+0x18>
     dca:	d6 d0       	rcall	.+428    	; 0xf78 <__fp_pscA>
     dcc:	30 f0       	brcs	.+12     	; 0xdda <__divsf3+0x18>
     dce:	21 f4       	brne	.+8      	; 0xdd8 <__divsf3+0x16>
     dd0:	5f 3f       	cpi	r21, 0xFF	; 255
     dd2:	19 f0       	breq	.+6      	; 0xdda <__divsf3+0x18>
     dd4:	c8 c0       	rjmp	.+400    	; 0xf66 <__fp_inf>
     dd6:	51 11       	cpse	r21, r1
     dd8:	11 c1       	rjmp	.+546    	; 0xffc <__fp_szero>
     dda:	cb c0       	rjmp	.+406    	; 0xf72 <__fp_nan>

00000ddc <__divsf3x>:
     ddc:	ec d0       	rcall	.+472    	; 0xfb6 <__fp_split3>
     dde:	98 f3       	brcs	.-26     	; 0xdc6 <__divsf3+0x4>

00000de0 <__divsf3_pse>:
     de0:	99 23       	and	r25, r25
     de2:	c9 f3       	breq	.-14     	; 0xdd6 <__divsf3+0x14>
     de4:	55 23       	and	r21, r21
     de6:	b1 f3       	breq	.-20     	; 0xdd4 <__divsf3+0x12>
     de8:	95 1b       	sub	r25, r21
     dea:	55 0b       	sbc	r21, r21
     dec:	bb 27       	eor	r27, r27
     dee:	aa 27       	eor	r26, r26
     df0:	62 17       	cp	r22, r18
     df2:	73 07       	cpc	r23, r19
     df4:	84 07       	cpc	r24, r20
     df6:	38 f0       	brcs	.+14     	; 0xe06 <__divsf3_pse+0x26>
     df8:	9f 5f       	subi	r25, 0xFF	; 255
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	aa 1f       	adc	r26, r26
     e04:	a9 f3       	breq	.-22     	; 0xdf0 <__divsf3_pse+0x10>
     e06:	33 d0       	rcall	.+102    	; 0xe6e <__divsf3_pse+0x8e>
     e08:	0e 2e       	mov	r0, r30
     e0a:	3a f0       	brmi	.+14     	; 0xe1a <__divsf3_pse+0x3a>
     e0c:	e0 e8       	ldi	r30, 0x80	; 128
     e0e:	30 d0       	rcall	.+96     	; 0xe70 <__divsf3_pse+0x90>
     e10:	91 50       	subi	r25, 0x01	; 1
     e12:	50 40       	sbci	r21, 0x00	; 0
     e14:	e6 95       	lsr	r30
     e16:	00 1c       	adc	r0, r0
     e18:	ca f7       	brpl	.-14     	; 0xe0c <__divsf3_pse+0x2c>
     e1a:	29 d0       	rcall	.+82     	; 0xe6e <__divsf3_pse+0x8e>
     e1c:	fe 2f       	mov	r31, r30
     e1e:	27 d0       	rcall	.+78     	; 0xe6e <__divsf3_pse+0x8e>
     e20:	66 0f       	add	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	88 1f       	adc	r24, r24
     e26:	bb 1f       	adc	r27, r27
     e28:	26 17       	cp	r18, r22
     e2a:	37 07       	cpc	r19, r23
     e2c:	48 07       	cpc	r20, r24
     e2e:	ab 07       	cpc	r26, r27
     e30:	b0 e8       	ldi	r27, 0x80	; 128
     e32:	09 f0       	breq	.+2      	; 0xe36 <__divsf3_pse+0x56>
     e34:	bb 0b       	sbc	r27, r27
     e36:	80 2d       	mov	r24, r0
     e38:	bf 01       	movw	r22, r30
     e3a:	ff 27       	eor	r31, r31
     e3c:	93 58       	subi	r25, 0x83	; 131
     e3e:	5f 4f       	sbci	r21, 0xFF	; 255
     e40:	2a f0       	brmi	.+10     	; 0xe4c <__divsf3_pse+0x6c>
     e42:	9e 3f       	cpi	r25, 0xFE	; 254
     e44:	51 05       	cpc	r21, r1
     e46:	68 f0       	brcs	.+26     	; 0xe62 <__divsf3_pse+0x82>
     e48:	8e c0       	rjmp	.+284    	; 0xf66 <__fp_inf>
     e4a:	d8 c0       	rjmp	.+432    	; 0xffc <__fp_szero>
     e4c:	5f 3f       	cpi	r21, 0xFF	; 255
     e4e:	ec f3       	brlt	.-6      	; 0xe4a <__divsf3_pse+0x6a>
     e50:	98 3e       	cpi	r25, 0xE8	; 232
     e52:	dc f3       	brlt	.-10     	; 0xe4a <__divsf3_pse+0x6a>
     e54:	86 95       	lsr	r24
     e56:	77 95       	ror	r23
     e58:	67 95       	ror	r22
     e5a:	b7 95       	ror	r27
     e5c:	f7 95       	ror	r31
     e5e:	9f 5f       	subi	r25, 0xFF	; 255
     e60:	c9 f7       	brne	.-14     	; 0xe54 <__divsf3_pse+0x74>
     e62:	88 0f       	add	r24, r24
     e64:	91 1d       	adc	r25, r1
     e66:	96 95       	lsr	r25
     e68:	87 95       	ror	r24
     e6a:	97 f9       	bld	r25, 7
     e6c:	08 95       	ret
     e6e:	e1 e0       	ldi	r30, 0x01	; 1
     e70:	66 0f       	add	r22, r22
     e72:	77 1f       	adc	r23, r23
     e74:	88 1f       	adc	r24, r24
     e76:	bb 1f       	adc	r27, r27
     e78:	62 17       	cp	r22, r18
     e7a:	73 07       	cpc	r23, r19
     e7c:	84 07       	cpc	r24, r20
     e7e:	ba 07       	cpc	r27, r26
     e80:	20 f0       	brcs	.+8      	; 0xe8a <__divsf3_pse+0xaa>
     e82:	62 1b       	sub	r22, r18
     e84:	73 0b       	sbc	r23, r19
     e86:	84 0b       	sbc	r24, r20
     e88:	ba 0b       	sbc	r27, r26
     e8a:	ee 1f       	adc	r30, r30
     e8c:	88 f7       	brcc	.-30     	; 0xe70 <__divsf3_pse+0x90>
     e8e:	e0 95       	com	r30
     e90:	08 95       	ret

00000e92 <__fixunssfsi>:
     e92:	99 d0       	rcall	.+306    	; 0xfc6 <__fp_splitA>
     e94:	88 f0       	brcs	.+34     	; 0xeb8 <__fixunssfsi+0x26>
     e96:	9f 57       	subi	r25, 0x7F	; 127
     e98:	90 f0       	brcs	.+36     	; 0xebe <__fixunssfsi+0x2c>
     e9a:	b9 2f       	mov	r27, r25
     e9c:	99 27       	eor	r25, r25
     e9e:	b7 51       	subi	r27, 0x17	; 23
     ea0:	a0 f0       	brcs	.+40     	; 0xeca <__fixunssfsi+0x38>
     ea2:	d1 f0       	breq	.+52     	; 0xed8 <__fixunssfsi+0x46>
     ea4:	66 0f       	add	r22, r22
     ea6:	77 1f       	adc	r23, r23
     ea8:	88 1f       	adc	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	1a f0       	brmi	.+6      	; 0xeb4 <__fixunssfsi+0x22>
     eae:	ba 95       	dec	r27
     eb0:	c9 f7       	brne	.-14     	; 0xea4 <__fixunssfsi+0x12>
     eb2:	12 c0       	rjmp	.+36     	; 0xed8 <__fixunssfsi+0x46>
     eb4:	b1 30       	cpi	r27, 0x01	; 1
     eb6:	81 f0       	breq	.+32     	; 0xed8 <__fixunssfsi+0x46>
     eb8:	a0 d0       	rcall	.+320    	; 0xffa <__fp_zero>
     eba:	b1 e0       	ldi	r27, 0x01	; 1
     ebc:	08 95       	ret
     ebe:	9d c0       	rjmp	.+314    	; 0xffa <__fp_zero>
     ec0:	67 2f       	mov	r22, r23
     ec2:	78 2f       	mov	r23, r24
     ec4:	88 27       	eor	r24, r24
     ec6:	b8 5f       	subi	r27, 0xF8	; 248
     ec8:	39 f0       	breq	.+14     	; 0xed8 <__fixunssfsi+0x46>
     eca:	b9 3f       	cpi	r27, 0xF9	; 249
     ecc:	cc f3       	brlt	.-14     	; 0xec0 <__fixunssfsi+0x2e>
     ece:	86 95       	lsr	r24
     ed0:	77 95       	ror	r23
     ed2:	67 95       	ror	r22
     ed4:	b3 95       	inc	r27
     ed6:	d9 f7       	brne	.-10     	; 0xece <__fixunssfsi+0x3c>
     ed8:	3e f4       	brtc	.+14     	; 0xee8 <__fixunssfsi+0x56>
     eda:	90 95       	com	r25
     edc:	80 95       	com	r24
     ede:	70 95       	com	r23
     ee0:	61 95       	neg	r22
     ee2:	7f 4f       	sbci	r23, 0xFF	; 255
     ee4:	8f 4f       	sbci	r24, 0xFF	; 255
     ee6:	9f 4f       	sbci	r25, 0xFF	; 255
     ee8:	08 95       	ret

00000eea <__floatundisf>:
     eea:	e8 94       	clt

00000eec <__fp_di2sf>:
     eec:	f9 2f       	mov	r31, r25
     eee:	96 eb       	ldi	r25, 0xB6	; 182
     ef0:	ff 23       	and	r31, r31
     ef2:	81 f0       	breq	.+32     	; 0xf14 <__fp_di2sf+0x28>
     ef4:	12 16       	cp	r1, r18
     ef6:	13 06       	cpc	r1, r19
     ef8:	14 06       	cpc	r1, r20
     efa:	44 0b       	sbc	r20, r20
     efc:	93 95       	inc	r25
     efe:	f6 95       	lsr	r31
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	57 95       	ror	r21
     f08:	40 40       	sbci	r20, 0x00	; 0
     f0a:	ff 23       	and	r31, r31
     f0c:	b9 f7       	brne	.-18     	; 0xefc <__fp_di2sf+0x10>
     f0e:	1b c0       	rjmp	.+54     	; 0xf46 <__fp_di2sf+0x5a>
     f10:	99 27       	eor	r25, r25
     f12:	08 95       	ret
     f14:	88 23       	and	r24, r24
     f16:	51 f4       	brne	.+20     	; 0xf2c <__fp_di2sf+0x40>
     f18:	98 50       	subi	r25, 0x08	; 8
     f1a:	d2 f7       	brpl	.-12     	; 0xf10 <__fp_di2sf+0x24>
     f1c:	87 2b       	or	r24, r23
     f1e:	76 2f       	mov	r23, r22
     f20:	65 2f       	mov	r22, r21
     f22:	54 2f       	mov	r21, r20
     f24:	43 2f       	mov	r20, r19
     f26:	32 2f       	mov	r19, r18
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	b1 f3       	breq	.-20     	; 0xf18 <__fp_di2sf+0x2c>
     f2c:	12 16       	cp	r1, r18
     f2e:	13 06       	cpc	r1, r19
     f30:	14 06       	cpc	r1, r20
     f32:	44 0b       	sbc	r20, r20
     f34:	88 23       	and	r24, r24
     f36:	3a f0       	brmi	.+14     	; 0xf46 <__fp_di2sf+0x5a>
     f38:	9a 95       	dec	r25
     f3a:	44 0f       	add	r20, r20
     f3c:	55 1f       	adc	r21, r21
     f3e:	66 1f       	adc	r22, r22
     f40:	77 1f       	adc	r23, r23
     f42:	88 1f       	adc	r24, r24
     f44:	ca f7       	brpl	.-14     	; 0xf38 <__fp_di2sf+0x4c>
     f46:	55 23       	and	r21, r21
     f48:	4a f4       	brpl	.+18     	; 0xf5c <__fp_di2sf+0x70>
     f4a:	44 0f       	add	r20, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	11 f4       	brne	.+4      	; 0xf54 <__fp_di2sf+0x68>
     f50:	60 ff       	sbrs	r22, 0
     f52:	04 c0       	rjmp	.+8      	; 0xf5c <__fp_di2sf+0x70>
     f54:	6f 5f       	subi	r22, 0xFF	; 255
     f56:	7f 4f       	sbci	r23, 0xFF	; 255
     f58:	8f 4f       	sbci	r24, 0xFF	; 255
     f5a:	9f 4f       	sbci	r25, 0xFF	; 255
     f5c:	88 0f       	add	r24, r24
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	97 f9       	bld	r25, 7
     f64:	08 95       	ret

00000f66 <__fp_inf>:
     f66:	97 f9       	bld	r25, 7
     f68:	9f 67       	ori	r25, 0x7F	; 127
     f6a:	80 e8       	ldi	r24, 0x80	; 128
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	08 95       	ret

00000f72 <__fp_nan>:
     f72:	9f ef       	ldi	r25, 0xFF	; 255
     f74:	80 ec       	ldi	r24, 0xC0	; 192
     f76:	08 95       	ret

00000f78 <__fp_pscA>:
     f78:	00 24       	eor	r0, r0
     f7a:	0a 94       	dec	r0
     f7c:	16 16       	cp	r1, r22
     f7e:	17 06       	cpc	r1, r23
     f80:	18 06       	cpc	r1, r24
     f82:	09 06       	cpc	r0, r25
     f84:	08 95       	ret

00000f86 <__fp_pscB>:
     f86:	00 24       	eor	r0, r0
     f88:	0a 94       	dec	r0
     f8a:	12 16       	cp	r1, r18
     f8c:	13 06       	cpc	r1, r19
     f8e:	14 06       	cpc	r1, r20
     f90:	05 06       	cpc	r0, r21
     f92:	08 95       	ret

00000f94 <__fp_round>:
     f94:	09 2e       	mov	r0, r25
     f96:	03 94       	inc	r0
     f98:	00 0c       	add	r0, r0
     f9a:	11 f4       	brne	.+4      	; 0xfa0 <__fp_round+0xc>
     f9c:	88 23       	and	r24, r24
     f9e:	52 f0       	brmi	.+20     	; 0xfb4 <__fp_round+0x20>
     fa0:	bb 0f       	add	r27, r27
     fa2:	40 f4       	brcc	.+16     	; 0xfb4 <__fp_round+0x20>
     fa4:	bf 2b       	or	r27, r31
     fa6:	11 f4       	brne	.+4      	; 0xfac <__fp_round+0x18>
     fa8:	60 ff       	sbrs	r22, 0
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <__fp_round+0x20>
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	7f 4f       	sbci	r23, 0xFF	; 255
     fb0:	8f 4f       	sbci	r24, 0xFF	; 255
     fb2:	9f 4f       	sbci	r25, 0xFF	; 255
     fb4:	08 95       	ret

00000fb6 <__fp_split3>:
     fb6:	57 fd       	sbrc	r21, 7
     fb8:	90 58       	subi	r25, 0x80	; 128
     fba:	44 0f       	add	r20, r20
     fbc:	55 1f       	adc	r21, r21
     fbe:	59 f0       	breq	.+22     	; 0xfd6 <__fp_splitA+0x10>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	71 f0       	breq	.+28     	; 0xfe0 <__fp_splitA+0x1a>
     fc4:	47 95       	ror	r20

00000fc6 <__fp_splitA>:
     fc6:	88 0f       	add	r24, r24
     fc8:	97 fb       	bst	r25, 7
     fca:	99 1f       	adc	r25, r25
     fcc:	61 f0       	breq	.+24     	; 0xfe6 <__fp_splitA+0x20>
     fce:	9f 3f       	cpi	r25, 0xFF	; 255
     fd0:	79 f0       	breq	.+30     	; 0xff0 <__fp_splitA+0x2a>
     fd2:	87 95       	ror	r24
     fd4:	08 95       	ret
     fd6:	12 16       	cp	r1, r18
     fd8:	13 06       	cpc	r1, r19
     fda:	14 06       	cpc	r1, r20
     fdc:	55 1f       	adc	r21, r21
     fde:	f2 cf       	rjmp	.-28     	; 0xfc4 <__fp_split3+0xe>
     fe0:	46 95       	lsr	r20
     fe2:	f1 df       	rcall	.-30     	; 0xfc6 <__fp_splitA>
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <__fp_splitA+0x30>
     fe6:	16 16       	cp	r1, r22
     fe8:	17 06       	cpc	r1, r23
     fea:	18 06       	cpc	r1, r24
     fec:	99 1f       	adc	r25, r25
     fee:	f1 cf       	rjmp	.-30     	; 0xfd2 <__fp_splitA+0xc>
     ff0:	86 95       	lsr	r24
     ff2:	71 05       	cpc	r23, r1
     ff4:	61 05       	cpc	r22, r1
     ff6:	08 94       	sec
     ff8:	08 95       	ret

00000ffa <__fp_zero>:
     ffa:	e8 94       	clt

00000ffc <__fp_szero>:
     ffc:	bb 27       	eor	r27, r27
     ffe:	66 27       	eor	r22, r22
    1000:	77 27       	eor	r23, r23
    1002:	cb 01       	movw	r24, r22
    1004:	97 f9       	bld	r25, 7
    1006:	08 95       	ret

00001008 <__muldi3>:
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	1f 93       	push	r17
    100e:	0f 93       	push	r16
    1010:	9a 9d       	mul	r25, r10
    1012:	f0 2d       	mov	r31, r0
    1014:	21 9f       	mul	r18, r17
    1016:	f0 0d       	add	r31, r0
    1018:	8b 9d       	mul	r24, r11
    101a:	f0 0d       	add	r31, r0
    101c:	8a 9d       	mul	r24, r10
    101e:	e0 2d       	mov	r30, r0
    1020:	f1 0d       	add	r31, r1
    1022:	03 9f       	mul	r16, r19
    1024:	f0 0d       	add	r31, r0
    1026:	02 9f       	mul	r16, r18
    1028:	e0 0d       	add	r30, r0
    102a:	f1 1d       	adc	r31, r1
    102c:	4e 9d       	mul	r20, r14
    102e:	e0 0d       	add	r30, r0
    1030:	f1 1d       	adc	r31, r1
    1032:	5e 9d       	mul	r21, r14
    1034:	f0 0d       	add	r31, r0
    1036:	4f 9d       	mul	r20, r15
    1038:	f0 0d       	add	r31, r0
    103a:	7f 93       	push	r23
    103c:	6f 93       	push	r22
    103e:	bf 92       	push	r11
    1040:	af 92       	push	r10
    1042:	5f 93       	push	r21
    1044:	4f 93       	push	r20
    1046:	d5 01       	movw	r26, r10
    1048:	8e d0       	rcall	.+284    	; 0x1166 <__umulhisi3>
    104a:	8b 01       	movw	r16, r22
    104c:	ac 01       	movw	r20, r24
    104e:	d7 01       	movw	r26, r14
    1050:	8a d0       	rcall	.+276    	; 0x1166 <__umulhisi3>
    1052:	eb 01       	movw	r28, r22
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	d6 01       	movw	r26, r12
    105a:	1f d0       	rcall	.+62     	; 0x109a <__muldi3_6>
    105c:	2f 91       	pop	r18
    105e:	3f 91       	pop	r19
    1060:	d6 01       	movw	r26, r12
    1062:	81 d0       	rcall	.+258    	; 0x1166 <__umulhisi3>
    1064:	c6 0f       	add	r28, r22
    1066:	d7 1f       	adc	r29, r23
    1068:	e8 1f       	adc	r30, r24
    106a:	f9 1f       	adc	r31, r25
    106c:	af 91       	pop	r26
    106e:	bf 91       	pop	r27
    1070:	14 d0       	rcall	.+40     	; 0x109a <__muldi3_6>
    1072:	2f 91       	pop	r18
    1074:	3f 91       	pop	r19
    1076:	77 d0       	rcall	.+238    	; 0x1166 <__umulhisi3>
    1078:	c6 0f       	add	r28, r22
    107a:	d7 1f       	adc	r29, r23
    107c:	e8 1f       	adc	r30, r24
    107e:	f9 1f       	adc	r31, r25
    1080:	d6 01       	movw	r26, r12
    1082:	71 d0       	rcall	.+226    	; 0x1166 <__umulhisi3>
    1084:	e6 0f       	add	r30, r22
    1086:	f7 1f       	adc	r31, r23
    1088:	98 01       	movw	r18, r16
    108a:	be 01       	movw	r22, r28
    108c:	cf 01       	movw	r24, r30
    108e:	11 24       	eor	r1, r1
    1090:	0f 91       	pop	r16
    1092:	1f 91       	pop	r17
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <__muldi3_6>:
    109a:	65 d0       	rcall	.+202    	; 0x1166 <__umulhisi3>
    109c:	46 0f       	add	r20, r22
    109e:	57 1f       	adc	r21, r23
    10a0:	c8 1f       	adc	r28, r24
    10a2:	d9 1f       	adc	r29, r25
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <__muldi3_6+0xe>
    10a6:	31 96       	adiw	r30, 0x01	; 1
    10a8:	08 95       	ret

000010aa <__umoddi3>:
    10aa:	68 94       	set
    10ac:	01 c0       	rjmp	.+2      	; 0x10b0 <__udivdi3_umoddi3>

000010ae <__udivdi3>:
    10ae:	e8 94       	clt

000010b0 <__udivdi3_umoddi3>:
    10b0:	8f 92       	push	r8
    10b2:	9f 92       	push	r9
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	05 d0       	rcall	.+10     	; 0x10c4 <__udivmod64>
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	9f 90       	pop	r9
    10c0:	8f 90       	pop	r8
    10c2:	08 95       	ret

000010c4 <__udivmod64>:
    10c4:	88 24       	eor	r8, r8
    10c6:	99 24       	eor	r9, r9
    10c8:	f4 01       	movw	r30, r8
    10ca:	e4 01       	movw	r28, r8
    10cc:	b0 e4       	ldi	r27, 0x40	; 64
    10ce:	9f 93       	push	r25
    10d0:	aa 27       	eor	r26, r26
    10d2:	9a 15       	cp	r25, r10
    10d4:	8b 04       	cpc	r8, r11
    10d6:	9c 04       	cpc	r9, r12
    10d8:	ed 05       	cpc	r30, r13
    10da:	fe 05       	cpc	r31, r14
    10dc:	cf 05       	cpc	r28, r15
    10de:	d0 07       	cpc	r29, r16
    10e0:	a1 07       	cpc	r26, r17
    10e2:	98 f4       	brcc	.+38     	; 0x110a <__udivmod64+0x46>
    10e4:	ad 2f       	mov	r26, r29
    10e6:	dc 2f       	mov	r29, r28
    10e8:	cf 2f       	mov	r28, r31
    10ea:	fe 2f       	mov	r31, r30
    10ec:	e9 2d       	mov	r30, r9
    10ee:	98 2c       	mov	r9, r8
    10f0:	89 2e       	mov	r8, r25
    10f2:	98 2f       	mov	r25, r24
    10f4:	87 2f       	mov	r24, r23
    10f6:	76 2f       	mov	r23, r22
    10f8:	65 2f       	mov	r22, r21
    10fa:	54 2f       	mov	r21, r20
    10fc:	43 2f       	mov	r20, r19
    10fe:	32 2f       	mov	r19, r18
    1100:	22 27       	eor	r18, r18
    1102:	b8 50       	subi	r27, 0x08	; 8
    1104:	31 f7       	brne	.-52     	; 0x10d2 <__udivmod64+0xe>
    1106:	bf 91       	pop	r27
    1108:	27 c0       	rjmp	.+78     	; 0x1158 <__udivmod64+0x94>
    110a:	1b 2e       	mov	r1, r27
    110c:	bf 91       	pop	r27
    110e:	bb 27       	eor	r27, r27
    1110:	22 0f       	add	r18, r18
    1112:	33 1f       	adc	r19, r19
    1114:	44 1f       	adc	r20, r20
    1116:	55 1f       	adc	r21, r21
    1118:	66 1f       	adc	r22, r22
    111a:	77 1f       	adc	r23, r23
    111c:	88 1f       	adc	r24, r24
    111e:	99 1f       	adc	r25, r25
    1120:	88 1c       	adc	r8, r8
    1122:	99 1c       	adc	r9, r9
    1124:	ee 1f       	adc	r30, r30
    1126:	ff 1f       	adc	r31, r31
    1128:	cc 1f       	adc	r28, r28
    112a:	dd 1f       	adc	r29, r29
    112c:	aa 1f       	adc	r26, r26
    112e:	bb 1f       	adc	r27, r27
    1130:	8a 14       	cp	r8, r10
    1132:	9b 04       	cpc	r9, r11
    1134:	ec 05       	cpc	r30, r12
    1136:	fd 05       	cpc	r31, r13
    1138:	ce 05       	cpc	r28, r14
    113a:	df 05       	cpc	r29, r15
    113c:	a0 07       	cpc	r26, r16
    113e:	b1 07       	cpc	r27, r17
    1140:	48 f0       	brcs	.+18     	; 0x1154 <__udivmod64+0x90>
    1142:	8a 18       	sub	r8, r10
    1144:	9b 08       	sbc	r9, r11
    1146:	ec 09       	sbc	r30, r12
    1148:	fd 09       	sbc	r31, r13
    114a:	ce 09       	sbc	r28, r14
    114c:	df 09       	sbc	r29, r15
    114e:	a0 0b       	sbc	r26, r16
    1150:	b1 0b       	sbc	r27, r17
    1152:	21 60       	ori	r18, 0x01	; 1
    1154:	1a 94       	dec	r1
    1156:	e1 f6       	brne	.-72     	; 0x1110 <__udivmod64+0x4c>
    1158:	2e f4       	brtc	.+10     	; 0x1164 <__udivmod64+0xa0>
    115a:	94 01       	movw	r18, r8
    115c:	af 01       	movw	r20, r30
    115e:	be 01       	movw	r22, r28
    1160:	cd 01       	movw	r24, r26
    1162:	00 0c       	add	r0, r0
    1164:	08 95       	ret

00001166 <__umulhisi3>:
    1166:	a2 9f       	mul	r26, r18
    1168:	b0 01       	movw	r22, r0
    116a:	b3 9f       	mul	r27, r19
    116c:	c0 01       	movw	r24, r0
    116e:	a3 9f       	mul	r26, r19
    1170:	70 0d       	add	r23, r0
    1172:	81 1d       	adc	r24, r1
    1174:	11 24       	eor	r1, r1
    1176:	91 1d       	adc	r25, r1
    1178:	b2 9f       	mul	r27, r18
    117a:	70 0d       	add	r23, r0
    117c:	81 1d       	adc	r24, r1
    117e:	11 24       	eor	r1, r1
    1180:	91 1d       	adc	r25, r1
    1182:	08 95       	ret

00001184 <_exit>:
    1184:	f8 94       	cli

00001186 <__stop_program>:
    1186:	ff cf       	rjmp	.-2      	; 0x1186 <__stop_program>
