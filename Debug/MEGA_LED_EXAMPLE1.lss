
MEGA_LED_EXAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000650  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000714  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001021  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000bd2  00000000  00000000  00001795  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e24  00000000  00000000  00002367  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000318c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0001168c  00000000  00000000  00003264  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  000148f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00014a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00003f3a  00000000  00000000  00014ac8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	59 c0       	rjmp	.+178    	; 0xb4 <__ctors_end>
   2:	00 00       	nop
   4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
   6:	00 00       	nop
   8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
   a:	00 00       	nop
   c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
   e:	00 00       	nop
  10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
  12:	00 00       	nop
  14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
  16:	00 00       	nop
  18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
  22:	00 00       	nop
  24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
  26:	00 00       	nop
  28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4b c0       	rjmp	.+150    	; 0xc4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	49 c0       	rjmp	.+146    	; 0xc4 <__bad_interrupt>
  32:	00 00       	nop
  34:	47 c0       	rjmp	.+142    	; 0xc4 <__bad_interrupt>
  36:	00 00       	nop
  38:	45 c0       	rjmp	.+138    	; 0xc4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
  42:	00 00       	nop
  44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
  46:	00 00       	nop
  48:	3d c0       	rjmp	.+122    	; 0xc4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3b c0       	rjmp	.+118    	; 0xc4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
  52:	00 00       	nop
  54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
  56:	00 00       	nop
  58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
  62:	00 00       	nop
  64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
  66:	00 00       	nop
  68:	2d c0       	rjmp	.+90     	; 0xc4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2b c0       	rjmp	.+86     	; 0xc4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	29 c0       	rjmp	.+82     	; 0xc4 <__bad_interrupt>
  72:	00 00       	nop
  74:	27 c0       	rjmp	.+78     	; 0xc4 <__bad_interrupt>
  76:	00 00       	nop
  78:	25 c0       	rjmp	.+74     	; 0xc4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	23 c0       	rjmp	.+70     	; 0xc4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	21 c0       	rjmp	.+66     	; 0xc4 <__bad_interrupt>
  82:	00 00       	nop
  84:	1f c0       	rjmp	.+62     	; 0xc4 <__bad_interrupt>
  86:	00 00       	nop
  88:	1d c0       	rjmp	.+58     	; 0xc4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	1b c0       	rjmp	.+54     	; 0xc4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	19 c0       	rjmp	.+50     	; 0xc4 <__bad_interrupt>
  92:	00 00       	nop
  94:	17 c0       	rjmp	.+46     	; 0xc4 <__bad_interrupt>
  96:	00 00       	nop
  98:	15 c0       	rjmp	.+42     	; 0xc4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	13 c0       	rjmp	.+38     	; 0xc4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	11 c0       	rjmp	.+34     	; 0xc4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	0f c0       	rjmp	.+30     	; 0xc4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	0d c0       	rjmp	.+26     	; 0xc4 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	0b c0       	rjmp	.+22     	; 0xc4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	09 c0       	rjmp	.+18     	; 0xc4 <__bad_interrupt>
	...

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	40 d1       	rcall	.+640    	; 0x342 <main>
  c2:	c4 c2       	rjmp	.+1416   	; 0x64c <_exit>

000000c4 <__bad_interrupt>:
  c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
  c6:	04 c0       	rjmp	.+8      	; 0xd0 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
  c8:	61 50       	subi	r22, 0x01	; 1
  ca:	71 09       	sbc	r23, r1
  cc:	81 09       	sbc	r24, r1
  ce:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
  d0:	61 15       	cp	r22, r1
  d2:	71 05       	cpc	r23, r1
  d4:	81 05       	cpc	r24, r1
  d6:	91 05       	cpc	r25, r1
  d8:	b9 f7       	brne	.-18     	; 0xc8 <__portable_avr_delay_cycles+0x2>
  da:	08 95       	ret

000000dc <led_blink>:
#include <asf.h>

#define F_CPU 8000000UL

void led_blink(uint8_t count)
{
  dc:	cf 93       	push	r28
  de:	df 93       	push	r29
  e0:	cd b7       	in	r28, 0x3d	; 61
  e2:	de b7       	in	r29, 0x3e	; 62
  e4:	6b 97       	sbiw	r28, 0x1b	; 27
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	f8 94       	cli
  ea:	de bf       	out	0x3e, r29	; 62
  ec:	0f be       	out	0x3f, r0	; 63
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	8b 8f       	std	Y+27, r24	; 0x1b
	for (int i = count; i--; i > 0)
  f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
  f4:	88 2f       	mov	r24, r24
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	9a 83       	std	Y+2, r25	; 0x02
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	bb c0       	rjmp	.+374    	; 0x274 <led_blink+0x198>
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	8b 83       	std	Y+3, r24	; 0x03
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	88 8b       	std	Y+16, r24	; 0x10
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
__always_inline static inline void ioport_set_value(port_pin_t pin, bool value)
{
	arch_ioport_set_pin_level(pin, value);
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	9a 8b       	std	Y+18, r25	; 0x12
 10e:	89 8b       	std	Y+17, r24	; 0x11
 110:	88 89       	ldd	r24, Y+16	; 0x10
 112:	8b 8b       	std	Y+19, r24	; 0x13
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 114:	89 89       	ldd	r24, Y+17	; 0x11
 116:	9a 89       	ldd	r25, Y+18	; 0x12
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	96 95       	lsr	r25
 11e:	87 95       	ror	r24
 120:	96 95       	lsr	r25
 122:	87 95       	ror	r24
 124:	8c 8b       	std	Y+20, r24	; 0x14
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 126:	8c 89       	ldd	r24, Y+20	; 0x14
 128:	28 2f       	mov	r18, r24
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	c9 01       	movw	r24, r18
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	82 0f       	add	r24, r18
 134:	93 1f       	adc	r25, r19
 136:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 138:	9e 8b       	std	Y+22, r25	; 0x16
 13a:	8d 8b       	std	Y+21, r24	; 0x15

	if (level) {
 13c:	8b 89       	ldd	r24, Y+19	; 0x13
 13e:	88 23       	and	r24, r24
 140:	d9 f0       	breq	.+54     	; 0x178 <led_blink+0x9c>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 142:	8d 89       	ldd	r24, Y+21	; 0x15
 144:	9e 89       	ldd	r25, Y+22	; 0x16
 146:	fc 01       	movw	r30, r24
 148:	42 81       	ldd	r20, Z+2	; 0x02
 14a:	89 89       	ldd	r24, Y+17	; 0x11
 14c:	9a 89       	ldd	r25, Y+18	; 0x12
 14e:	98 8f       	std	Y+24, r25	; 0x18
 150:	8f 8b       	std	Y+23, r24	; 0x17
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 152:	8f 89       	ldd	r24, Y+23	; 0x17
 154:	98 8d       	ldd	r25, Y+24	; 0x18
 156:	9c 01       	movw	r18, r24
 158:	27 70       	andi	r18, 0x07	; 7
 15a:	33 27       	eor	r19, r19
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	02 c0       	rjmp	.+4      	; 0x166 <led_blink+0x8a>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	2a 95       	dec	r18
 168:	e2 f7       	brpl	.-8      	; 0x162 <led_blink+0x86>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 16a:	24 2f       	mov	r18, r20
 16c:	28 2b       	or	r18, r24
 16e:	8d 89       	ldd	r24, Y+21	; 0x15
 170:	9e 89       	ldd	r25, Y+22	; 0x16
 172:	fc 01       	movw	r30, r24
 174:	22 83       	std	Z+2, r18	; 0x02
 176:	1c c0       	rjmp	.+56     	; 0x1b0 <led_blink+0xd4>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 178:	8d 89       	ldd	r24, Y+21	; 0x15
 17a:	9e 89       	ldd	r25, Y+22	; 0x16
 17c:	fc 01       	movw	r30, r24
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	48 2f       	mov	r20, r24
 182:	89 89       	ldd	r24, Y+17	; 0x11
 184:	9a 89       	ldd	r25, Y+18	; 0x12
 186:	9a 8f       	std	Y+26, r25	; 0x1a
 188:	89 8f       	std	Y+25, r24	; 0x19
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 18a:	89 8d       	ldd	r24, Y+25	; 0x19
 18c:	9a 8d       	ldd	r25, Y+26	; 0x1a
 18e:	9c 01       	movw	r18, r24
 190:	27 70       	andi	r18, 0x07	; 7
 192:	33 27       	eor	r19, r19
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 c0       	rjmp	.+4      	; 0x19e <led_blink+0xc2>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	2a 95       	dec	r18
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <led_blink+0xbe>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 1a2:	80 95       	com	r24
 1a4:	84 23       	and	r24, r20
 1a6:	28 2f       	mov	r18, r24
 1a8:	8d 89       	ldd	r24, Y+21	; 0x15
 1aa:	9e 89       	ldd	r25, Y+22	; 0x16
 1ac:	fc 01       	movw	r30, r24
 1ae:	22 83       	std	Z+2, r18	; 0x02
	{
		LED_On(LED0);
		delay_ms(200);
 1b0:	6b ea       	ldi	r22, 0xAB	; 171
 1b2:	71 e1       	ldi	r23, 0x11	; 17
 1b4:	84 e0       	ldi	r24, 0x04	; 4
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	86 df       	rcall	.-244    	; 0xc6 <__portable_avr_delay_cycles>
 1ba:	8d e0       	ldi	r24, 0x0D	; 13
 1bc:	8c 83       	std	Y+4, r24	; 0x04
 1be:	1d 82       	std	Y+5, r1	; 0x05
 * pin high (towards Vdd), while \a false means drive the pin low
 * (towards Vss).
 */
__always_inline static inline void ioport_set_value(port_pin_t pin, bool value)
{
	arch_ioport_set_pin_level(pin, value);
 1c0:	8c 81       	ldd	r24, Y+4	; 0x04
 1c2:	88 2f       	mov	r24, r24
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	9f 83       	std	Y+7, r25	; 0x07
 1c8:	8e 83       	std	Y+6, r24	; 0x06
 1ca:	8d 81       	ldd	r24, Y+5	; 0x05
 1cc:	88 87       	std	Y+8, r24	; 0x08
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	9f 81       	ldd	r25, Y+7	; 0x07
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	96 95       	lsr	r25
 1dc:	87 95       	ror	r24
 1de:	89 87       	std	Y+9, r24	; 0x09
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 1e0:	89 85       	ldd	r24, Y+9	; 0x09
 1e2:	28 2f       	mov	r18, r24
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	c9 01       	movw	r24, r18
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	80 96       	adiw	r24, 0x20	; 32
 * \param: level high/low
 */
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);
 1f2:	9b 87       	std	Y+11, r25	; 0x0b
 1f4:	8a 87       	std	Y+10, r24	; 0x0a

	if (level) {
 1f6:	88 85       	ldd	r24, Y+8	; 0x08
 1f8:	88 23       	and	r24, r24
 1fa:	d9 f0       	breq	.+54     	; 0x232 <led_blink+0x156>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 1fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 1fe:	9b 85       	ldd	r25, Y+11	; 0x0b
 200:	fc 01       	movw	r30, r24
 202:	42 81       	ldd	r20, Z+2	; 0x02
 204:	8e 81       	ldd	r24, Y+6	; 0x06
 206:	9f 81       	ldd	r25, Y+7	; 0x07
 208:	9d 87       	std	Y+13, r25	; 0x0d
 20a:	8c 87       	std	Y+12, r24	; 0x0c
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 20c:	8c 85       	ldd	r24, Y+12	; 0x0c
 20e:	9d 85       	ldd	r25, Y+13	; 0x0d
 210:	9c 01       	movw	r18, r24
 212:	27 70       	andi	r18, 0x07	; 7
 214:	33 27       	eor	r19, r19
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <led_blink+0x144>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	2a 95       	dec	r18
 222:	e2 f7       	brpl	.-8      	; 0x21c <led_blink+0x140>
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
 224:	24 2f       	mov	r18, r20
 226:	28 2b       	or	r18, r24
 228:	8a 85       	ldd	r24, Y+10	; 0x0a
 22a:	9b 85       	ldd	r25, Y+11	; 0x0b
 22c:	fc 01       	movw	r30, r24
 22e:	22 83       	std	Z+2, r18	; 0x02
 230:	1c c0       	rjmp	.+56     	; 0x26a <led_blink+0x18e>
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 232:	8a 85       	ldd	r24, Y+10	; 0x0a
 234:	9b 85       	ldd	r25, Y+11	; 0x0b
 236:	fc 01       	movw	r30, r24
 238:	82 81       	ldd	r24, Z+2	; 0x02
 23a:	48 2f       	mov	r20, r24
 23c:	8e 81       	ldd	r24, Y+6	; 0x06
 23e:	9f 81       	ldd	r25, Y+7	; 0x07
 240:	9f 87       	std	Y+15, r25	; 0x0f
 242:	8e 87       	std	Y+14, r24	; 0x0e
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 244:	8e 85       	ldd	r24, Y+14	; 0x0e
 246:	9f 85       	ldd	r25, Y+15	; 0x0f
 248:	9c 01       	movw	r18, r24
 24a:	27 70       	andi	r18, 0x07	; 7
 24c:	33 27       	eor	r19, r19
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	02 c0       	rjmp	.+4      	; 0x258 <led_blink+0x17c>
 254:	88 0f       	add	r24, r24
 256:	99 1f       	adc	r25, r25
 258:	2a 95       	dec	r18
 25a:	e2 f7       	brpl	.-8      	; 0x254 <led_blink+0x178>
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
 25c:	80 95       	com	r24
 25e:	84 23       	and	r24, r20
 260:	28 2f       	mov	r18, r24
 262:	8a 85       	ldd	r24, Y+10	; 0x0a
 264:	9b 85       	ldd	r25, Y+11	; 0x0b
 266:	fc 01       	movw	r30, r24
 268:	22 83       	std	Z+2, r18	; 0x02
		LED_Off(LED0);
		delay_ms(200);
 26a:	6b ea       	ldi	r22, 0xAB	; 171
 26c:	71 e1       	ldi	r23, 0x11	; 17
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	29 df       	rcall	.-430    	; 0xc6 <__portable_avr_delay_cycles>

#define F_CPU 8000000UL

void led_blink(uint8_t count)
{
	for (int i = count; i--; i > 0)
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	9c 01       	movw	r18, r24
 27a:	21 50       	subi	r18, 0x01	; 1
 27c:	31 09       	sbc	r19, r1
 27e:	3a 83       	std	Y+2, r19	; 0x02
 280:	29 83       	std	Y+1, r18	; 0x01
 282:	89 2b       	or	r24, r25
 284:	09 f0       	breq	.+2      	; 0x288 <led_blink+0x1ac>
 286:	3b cf       	rjmp	.-394    	; 0xfe <led_blink+0x22>
		LED_On(LED0);
		delay_ms(200);
		LED_Off(LED0);
		delay_ms(200);
	}
}
 288:	00 00       	nop
 28a:	6b 96       	adiw	r28, 0x1b	; 27
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret

0000029c <adc_init>:

void adc_init()
{
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	cd b7       	in	r28, 0x3d	; 61
 2a2:	de b7       	in	r29, 0x3e	; 62
	// Select Vref=AVcc
	ADMUX |= (1<<REFS0); // AVCC with external cap at AREF pin
 2a4:	8c e7       	ldi	r24, 0x7C	; 124
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	2c e7       	ldi	r18, 0x7C	; 124
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	f9 01       	movw	r30, r18
 2ae:	20 81       	ld	r18, Z
 2b0:	20 64       	ori	r18, 0x40	; 64
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
	// enable ADC
	ADCSRA |= 1<<ADEN;
 2b6:	8a e7       	ldi	r24, 0x7A	; 122
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	2a e7       	ldi	r18, 0x7A	; 122
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	f9 01       	movw	r30, r18
 2c0:	20 81       	ld	r18, Z
 2c2:	20 68       	ori	r18, 0x80	; 128
 2c4:	fc 01       	movw	r30, r24
 2c6:	20 83       	st	Z, r18
	//set prescaller to 128
	ADCSRA |= (1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 2c8:	8a e7       	ldi	r24, 0x7A	; 122
 2ca:	90 e0       	ldi	r25, 0x00	; 0
 2cc:	2a e7       	ldi	r18, 0x7A	; 122
 2ce:	30 e0       	ldi	r19, 0x00	; 0
 2d0:	f9 01       	movw	r30, r18
 2d2:	20 81       	ld	r18, Z
 2d4:	27 60       	ori	r18, 0x07	; 7
 2d6:	fc 01       	movw	r30, r24
 2d8:	20 83       	st	Z, r18
}
 2da:	00 00       	nop
 2dc:	df 91       	pop	r29
 2de:	cf 91       	pop	r28
 2e0:	08 95       	ret

000002e2 <adc_read>:

uint16_t adc_read(uint8_t ADCchannel)
{
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
 2e6:	1f 92       	push	r1
 2e8:	cd b7       	in	r28, 0x3d	; 61
 2ea:	de b7       	in	r29, 0x3e	; 62
 2ec:	89 83       	std	Y+1, r24	; 0x01
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (ADCchannel & 0x0F);
 2ee:	8c e7       	ldi	r24, 0x7C	; 124
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	2c e7       	ldi	r18, 0x7C	; 124
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	f9 01       	movw	r30, r18
 2f8:	20 81       	ld	r18, Z
 2fa:	32 2f       	mov	r19, r18
 2fc:	30 7f       	andi	r19, 0xF0	; 240
 2fe:	29 81       	ldd	r18, Y+1	; 0x01
 300:	2f 70       	andi	r18, 0x0F	; 15
 302:	23 2b       	or	r18, r19
 304:	fc 01       	movw	r30, r24
 306:	20 83       	st	Z, r18
	//single conversion mode
	ADCSRA |= (1<<ADSC);
 308:	8a e7       	ldi	r24, 0x7A	; 122
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	2a e7       	ldi	r18, 0x7A	; 122
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	20 64       	ori	r18, 0x40	; 64
 316:	fc 01       	movw	r30, r24
 318:	20 83       	st	Z, r18
	// wait until ADC conversion is complete
	while( ADCSRA & (1<<ADSC) );
 31a:	00 00       	nop
 31c:	8a e7       	ldi	r24, 0x7A	; 122
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	fc 01       	movw	r30, r24
 322:	80 81       	ld	r24, Z
 324:	88 2f       	mov	r24, r24
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	80 74       	andi	r24, 0x40	; 64
 32a:	99 27       	eor	r25, r25
 32c:	89 2b       	or	r24, r25
 32e:	b1 f7       	brne	.-20     	; 0x31c <adc_read+0x3a>
	return ADC;
 330:	88 e7       	ldi	r24, 0x78	; 120
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	fc 01       	movw	r30, r24
 336:	80 81       	ld	r24, Z
 338:	91 81       	ldd	r25, Z+1	; 0x01
}
 33a:	0f 90       	pop	r0
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	08 95       	ret

00000342 <main>:

int main (void)
{
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	cd b7       	in	r28, 0x3d	; 61
 348:	de b7       	in	r29, 0x3e	; 62
 34a:	2c 97       	sbiw	r28, 0x0c	; 12
 34c:	0f b6       	in	r0, 0x3f	; 63
 34e:	f8 94       	cli
 350:	de bf       	out	0x3e, r29	; 62
 352:	0f be       	out	0x3f, r0	; 63
 354:	cd bf       	out	0x3d, r28	; 61
	/* set board io port */
	board_init();
 356:	28 d0       	rcall	.+80     	; 0x3a8 <board_init>
	delay_init();
	adc_init();
 358:	a1 df       	rcall	.-190    	; 0x29c <adc_init>
	
	led_blink(5);
 35a:	85 e0       	ldi	r24, 0x05	; 5
 35c:	bf de       	rcall	.-642    	; 0xdc <led_blink>
 35e:	1a 82       	std	Y+2, r1	; 0x02
	
	uint16_t result0 = 0;
 360:	19 82       	std	Y+1, r1	; 0x01
 362:	1c 82       	std	Y+4, r1	; 0x04
	uint16_t result1 = 0;
 364:	1b 82       	std	Y+3, r1	; 0x03
 366:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t result2 = 0;
 368:	1d 82       	std	Y+5, r1	; 0x05
 36a:	18 86       	std	Y+8, r1	; 0x08
	uint16_t result3 = 0;
 36c:	1f 82       	std	Y+7, r1	; 0x07
 36e:	1a 86       	std	Y+10, r1	; 0x0a
	uint16_t result4 = 0;
 370:	19 86       	std	Y+9, r1	; 0x09
 372:	1c 86       	std	Y+12, r1	; 0x0c
	uint16_t result5 = 0;
 374:	1b 86       	std	Y+11, r1	; 0x0b
	
	while(1)
	{
		result0 = adc_read(0);
 376:	80 e0       	ldi	r24, 0x00	; 0
 378:	b4 df       	rcall	.-152    	; 0x2e2 <adc_read>
 37a:	9a 83       	std	Y+2, r25	; 0x02
 37c:	89 83       	std	Y+1, r24	; 0x01
		result1 = adc_read(1);
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	b0 df       	rcall	.-160    	; 0x2e2 <adc_read>
 382:	9c 83       	std	Y+4, r25	; 0x04
 384:	8b 83       	std	Y+3, r24	; 0x03
		result2 = adc_read(2);
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	ac df       	rcall	.-168    	; 0x2e2 <adc_read>
 38a:	9e 83       	std	Y+6, r25	; 0x06
 38c:	8d 83       	std	Y+5, r24	; 0x05
		result3 = adc_read(3);
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	a8 df       	rcall	.-176    	; 0x2e2 <adc_read>
 392:	98 87       	std	Y+8, r25	; 0x08
 394:	8f 83       	std	Y+7, r24	; 0x07
		result4 = adc_read(4);
 396:	84 e0       	ldi	r24, 0x04	; 4
 398:	a4 df       	rcall	.-184    	; 0x2e2 <adc_read>
 39a:	9a 87       	std	Y+10, r25	; 0x0a
 39c:	89 87       	std	Y+9, r24	; 0x09
 39e:	85 e0       	ldi	r24, 0x05	; 5
		result5 = adc_read(5);
 3a0:	a0 df       	rcall	.-192    	; 0x2e2 <adc_read>
 3a2:	9c 87       	std	Y+12, r25	; 0x0c
 3a4:	8b 87       	std	Y+11, r24	; 0x0b
 3a6:	e7 cf       	rjmp	.-50     	; 0x376 <main+0x34>

000003a8 <board_init>:
 3a8:	cf 93       	push	r28
	}
 3aa:	df 93       	push	r29
#include <conf_board.h>
#include "gpio.h"
#include "led.h"

void board_init(void)
{
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
 3b0:	6a 97       	sbiw	r28, 0x1a	; 26
 3b2:	0f b6       	in	r0, 0x3f	; 63
 3b4:	f8 94       	cli
 3b6:	de bf       	out	0x3e, r29	; 62
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	cd bf       	out	0x3d, r28	; 61
 3bc:	8d e0       	ldi	r24, 0x0D	; 13
 3be:	89 83       	std	Y+1, r24	; 0x01
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	98 8b       	std	Y+16, r25	; 0x10
 3c6:	8f 87       	std	Y+15, r24	; 0x0f
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	88 2f       	mov	r24, r24
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	9a 8b       	std	Y+18, r25	; 0x12
 3d0:	89 8b       	std	Y+17, r24	; 0x11
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 3d2:	89 89       	ldd	r24, Y+17	; 0x11
 3d4:	9a 89       	ldd	r25, Y+18	; 0x12
 3d6:	9c 01       	movw	r18, r24
 3d8:	27 70       	andi	r18, 0x07	; 7
 3da:	33 27       	eor	r19, r19
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	02 c0       	rjmp	.+4      	; 0x3e6 <board_init+0x3e>
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	2a 95       	dec	r18
 3e8:	e2 f7       	brpl	.-8      	; 0x3e2 <board_init+0x3a>
 3ea:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	88 2f       	mov	r24, r24
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	9c 8b       	std	Y+20, r25	; 0x14
 3f4:	8b 8b       	std	Y+19, r24	; 0x13
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 3f6:	8b 89       	ldd	r24, Y+19	; 0x13
 3f8:	9c 89       	ldd	r25, Y+20	; 0x14
 3fa:	96 95       	lsr	r25
 3fc:	87 95       	ror	r24
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	96 95       	lsr	r25
 404:	87 95       	ror	r24
 406:	8d 8b       	std	Y+21, r24	; 0x15
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 408:	8d 89       	ldd	r24, Y+21	; 0x15
 40a:	28 2f       	mov	r18, r24
 40c:	30 e0       	ldi	r19, 0x00	; 0
 40e:	c9 01       	movw	r24, r18
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	82 0f       	add	r24, r18
 416:	93 1f       	adc	r25, r19
 418:	80 96       	adiw	r24, 0x20	; 32
 41a:	9f 8b       	std	Y+23, r25	; 0x17
 41c:	8e 8b       	std	Y+22, r24	; 0x16
 41e:	48 8f       	std	Y+24, r20	; 0x18
 420:	8f 85       	ldd	r24, Y+15	; 0x0f
 422:	98 89       	ldd	r25, Y+16	; 0x10
 424:	9a 8f       	std	Y+26, r25	; 0x1a
 426:	89 8f       	std	Y+25, r24	; 0x19
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 428:	89 8d       	ldd	r24, Y+25	; 0x19
 42a:	9a 8d       	ldd	r25, Y+26	; 0x1a
 42c:	81 70       	andi	r24, 0x01	; 1
 42e:	99 27       	eor	r25, r25
 430:	89 2b       	or	r24, r25
 432:	89 f1       	breq	.+98     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
		if (flags & IOPORT_INIT_HIGH) {
 434:	89 8d       	ldd	r24, Y+25	; 0x19
 436:	9a 8d       	ldd	r25, Y+26	; 0x1a
 438:	82 70       	andi	r24, 0x02	; 2
 43a:	99 27       	eor	r25, r25
 43c:	89 2b       	or	r24, r25
 43e:	71 f0       	breq	.+28     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
			*((uint8_t *)port + 2) |= pin_mask;
 440:	8e 89       	ldd	r24, Y+22	; 0x16
 442:	9f 89       	ldd	r25, Y+23	; 0x17
 444:	02 96       	adiw	r24, 0x02	; 2
 446:	2e 89       	ldd	r18, Y+22	; 0x16
 448:	3f 89       	ldd	r19, Y+23	; 0x17
 44a:	2e 5f       	subi	r18, 0xFE	; 254
 44c:	3f 4f       	sbci	r19, 0xFF	; 255
 44e:	f9 01       	movw	r30, r18
 450:	30 81       	ld	r19, Z
 452:	28 8d       	ldd	r18, Y+24	; 0x18
 454:	23 2b       	or	r18, r19
 456:	fc 01       	movw	r30, r24
 458:	20 83       	st	Z, r18
 45a:	0f c0       	rjmp	.+30     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 45c:	8e 89       	ldd	r24, Y+22	; 0x16
 45e:	9f 89       	ldd	r25, Y+23	; 0x17
 460:	02 96       	adiw	r24, 0x02	; 2
 462:	2e 89       	ldd	r18, Y+22	; 0x16
 464:	3f 89       	ldd	r19, Y+23	; 0x17
 466:	2e 5f       	subi	r18, 0xFE	; 254
 468:	3f 4f       	sbci	r19, 0xFF	; 255
 46a:	f9 01       	movw	r30, r18
 46c:	20 81       	ld	r18, Z
 46e:	32 2f       	mov	r19, r18
 470:	28 8d       	ldd	r18, Y+24	; 0x18
 472:	20 95       	com	r18
 474:	23 23       	and	r18, r19
 476:	fc 01       	movw	r30, r24
 478:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
 47a:	8e 89       	ldd	r24, Y+22	; 0x16
 47c:	9f 89       	ldd	r25, Y+23	; 0x17
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	2e 89       	ldd	r18, Y+22	; 0x16
 482:	3f 89       	ldd	r19, Y+23	; 0x17
 484:	2f 5f       	subi	r18, 0xFF	; 255
 486:	3f 4f       	sbci	r19, 0xFF	; 255
 488:	f9 01       	movw	r30, r18
 48a:	30 81       	ld	r19, Z
 48c:	28 8d       	ldd	r18, Y+24	; 0x18
 48e:	23 2b       	or	r18, r19
 490:	fc 01       	movw	r30, r24
 492:	20 83       	st	Z, r18
 494:	32 c0       	rjmp	.+100    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 496:	8e 89       	ldd	r24, Y+22	; 0x16
 498:	9f 89       	ldd	r25, Y+23	; 0x17
 49a:	01 96       	adiw	r24, 0x01	; 1
 49c:	2e 89       	ldd	r18, Y+22	; 0x16
 49e:	3f 89       	ldd	r19, Y+23	; 0x17
 4a0:	2f 5f       	subi	r18, 0xFF	; 255
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	32 2f       	mov	r19, r18
 4aa:	28 8d       	ldd	r18, Y+24	; 0x18
 4ac:	20 95       	com	r18
 4ae:	23 23       	and	r18, r19
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
 4b4:	89 8d       	ldd	r24, Y+25	; 0x19
 4b6:	9a 8d       	ldd	r25, Y+26	; 0x1a
 4b8:	84 70       	andi	r24, 0x04	; 4
 4ba:	99 27       	eor	r25, r25
 4bc:	89 2b       	or	r24, r25
 4be:	71 f0       	breq	.+28     	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			*((uint8_t *)port + 2) |= pin_mask;
 4c0:	8e 89       	ldd	r24, Y+22	; 0x16
 4c2:	9f 89       	ldd	r25, Y+23	; 0x17
 4c4:	02 96       	adiw	r24, 0x02	; 2
 4c6:	2e 89       	ldd	r18, Y+22	; 0x16
 4c8:	3f 89       	ldd	r19, Y+23	; 0x17
 4ca:	2e 5f       	subi	r18, 0xFE	; 254
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	f9 01       	movw	r30, r18
 4d0:	30 81       	ld	r19, Z
 4d2:	28 8d       	ldd	r18, Y+24	; 0x18
 4d4:	23 2b       	or	r18, r19
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
 4da:	0f c0       	rjmp	.+30     	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 4dc:	8e 89       	ldd	r24, Y+22	; 0x16
 4de:	9f 89       	ldd	r25, Y+23	; 0x17
 4e0:	02 96       	adiw	r24, 0x02	; 2
 4e2:	2e 89       	ldd	r18, Y+22	; 0x16
 4e4:	3f 89       	ldd	r19, Y+23	; 0x17
 4e6:	2e 5f       	subi	r18, 0xFE	; 254
 4e8:	3f 4f       	sbci	r19, 0xFF	; 255
 4ea:	f9 01       	movw	r30, r18
 4ec:	20 81       	ld	r18, Z
 4ee:	32 2f       	mov	r19, r18
 4f0:	28 8d       	ldd	r18, Y+24	; 0x18
 4f2:	20 95       	com	r18
 4f4:	23 23       	and	r18, r19
 4f6:	fc 01       	movw	r30, r24
 4f8:	20 83       	st	Z, r18
 4fa:	8f e0       	ldi	r24, 0x0F	; 15
 4fc:	8a 83       	std	Y+2, r24	; 0x02
 4fe:	84 e0       	ldi	r24, 0x04	; 4
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	9c 83       	std	Y+4, r25	; 0x04
 504:	8b 83       	std	Y+3, r24	; 0x03
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 506:	8a 81       	ldd	r24, Y+2	; 0x02
 508:	88 2f       	mov	r24, r24
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	9e 83       	std	Y+6, r25	; 0x06
 50e:	8d 83       	std	Y+5, r24	; 0x05
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask
	(ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
 510:	8d 81       	ldd	r24, Y+5	; 0x05
 512:	9e 81       	ldd	r25, Y+6	; 0x06
 514:	9c 01       	movw	r18, r24
 516:	27 70       	andi	r18, 0x07	; 7
 518:	33 27       	eor	r19, r19
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	2a 95       	dec	r18
 526:	e2 f7       	brpl	.-8      	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
 528:	48 2f       	mov	r20, r24
 * parameters.
 */
__always_inline static inline void ioport_configure_pin(port_pin_t pin,
		port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	88 2f       	mov	r24, r24
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	98 87       	std	Y+8, r25	; 0x08
 532:	8f 83       	std	Y+7, r24	; 0x07
 * \brief: To get the base address of port number from defined pin
 * \param: pin. the pin number defined by IOPORT_CREATE_PIN
 */
__always_inline static PORT_t *arch_ioport_pin_to_base(ioport_pin_t pin)
{
	return arch_ioport_port_to_base(pin >> 3);
 534:	8f 81       	ldd	r24, Y+7	; 0x07
 536:	98 85       	ldd	r25, Y+8	; 0x08
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	96 95       	lsr	r25
 53e:	87 95       	ror	r24
 540:	96 95       	lsr	r25
 542:	87 95       	ror	r24
 544:	89 87       	std	Y+9, r24	; 0x09
	if (port >= IOPORT_PORTH) {
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS_H  + ((port - IOPORT_PORTH) * IOPORT_PORT_OFFSET)));	
	} else 
#endif
	{
	    return (PORT_t *)((uintptr_t)(IOPORT_BASE_ADDRESS + (port * IOPORT_PORT_OFFSET)));
 546:	89 85       	ldd	r24, Y+9	; 0x09
 548:	28 2f       	mov	r18, r24
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	c9 01       	movw	r24, r18
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	82 0f       	add	r24, r18
 554:	93 1f       	adc	r25, r19
 556:	80 96       	adiw	r24, 0x20	; 32
 558:	9b 87       	std	Y+11, r25	; 0x0b
 55a:	8a 87       	std	Y+10, r24	; 0x0a
 55c:	4c 87       	std	Y+12, r20	; 0x0c
 55e:	8b 81       	ldd	r24, Y+3	; 0x03
 560:	9c 81       	ldd	r25, Y+4	; 0x04
 562:	9e 87       	std	Y+14, r25	; 0x0e
 564:	8d 87       	std	Y+13, r24	; 0x0d
__always_inline static inline void ioport_configure_port_pin(void *port,
		pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
 566:	8d 85       	ldd	r24, Y+13	; 0x0d
 568:	9e 85       	ldd	r25, Y+14	; 0x0e
 56a:	81 70       	andi	r24, 0x01	; 1
 56c:	99 27       	eor	r25, r25
 56e:	89 2b       	or	r24, r25
 570:	89 f1       	breq	.+98     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
		if (flags & IOPORT_INIT_HIGH) {
 572:	8d 85       	ldd	r24, Y+13	; 0x0d
 574:	9e 85       	ldd	r25, Y+14	; 0x0e
 576:	82 70       	andi	r24, 0x02	; 2
 578:	99 27       	eor	r25, r25
 57a:	89 2b       	or	r24, r25
 57c:	71 f0       	breq	.+28     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
			*((uint8_t *)port + 2) |= pin_mask;
 57e:	8a 85       	ldd	r24, Y+10	; 0x0a
 580:	9b 85       	ldd	r25, Y+11	; 0x0b
 582:	02 96       	adiw	r24, 0x02	; 2
 584:	2a 85       	ldd	r18, Y+10	; 0x0a
 586:	3b 85       	ldd	r19, Y+11	; 0x0b
 588:	2e 5f       	subi	r18, 0xFE	; 254
 58a:	3f 4f       	sbci	r19, 0xFF	; 255
 58c:	f9 01       	movw	r30, r18
 58e:	30 81       	ld	r19, Z
 590:	2c 85       	ldd	r18, Y+12	; 0x0c
 592:	23 2b       	or	r18, r19
 594:	fc 01       	movw	r30, r24
 596:	20 83       	st	Z, r18
 598:	0f c0       	rjmp	.+30     	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 59a:	8a 85       	ldd	r24, Y+10	; 0x0a
 59c:	9b 85       	ldd	r25, Y+11	; 0x0b
 59e:	02 96       	adiw	r24, 0x02	; 2
 5a0:	2a 85       	ldd	r18, Y+10	; 0x0a
 5a2:	3b 85       	ldd	r19, Y+11	; 0x0b
 5a4:	2e 5f       	subi	r18, 0xFE	; 254
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	f9 01       	movw	r30, r18
 5aa:	20 81       	ld	r18, Z
 5ac:	32 2f       	mov	r19, r18
 5ae:	2c 85       	ldd	r18, Y+12	; 0x0c
 5b0:	20 95       	com	r18
 5b2:	23 23       	and	r18, r19
 5b4:	fc 01       	movw	r30, r24
 5b6:	20 83       	st	Z, r18
		}

		*((uint8_t *)port + 1) |= pin_mask;
 5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
 5ba:	9b 85       	ldd	r25, Y+11	; 0x0b
 5bc:	01 96       	adiw	r24, 0x01	; 1
 5be:	2a 85       	ldd	r18, Y+10	; 0x0a
 5c0:	3b 85       	ldd	r19, Y+11	; 0x0b
 5c2:	2f 5f       	subi	r18, 0xFF	; 255
 5c4:	3f 4f       	sbci	r19, 0xFF	; 255
 5c6:	f9 01       	movw	r30, r18
 5c8:	30 81       	ld	r19, Z
 5ca:	2c 85       	ldd	r18, Y+12	; 0x0c
 5cc:	23 2b       	or	r18, r19
 5ce:	fc 01       	movw	r30, r24
 5d0:	20 83       	st	Z, r18
	ioport_configure_pin(GPIO_PUSH_BUTTON_0,
	IOPORT_DIR_INPUT | IOPORT_PULL_UP);
	
	/* ADC pin init*/
	
}
 5d2:	32 c0       	rjmp	.+100    	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
 5d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 5d6:	9b 85       	ldd	r25, Y+11	; 0x0b
 5d8:	01 96       	adiw	r24, 0x01	; 1
 5da:	2a 85       	ldd	r18, Y+10	; 0x0a
 5dc:	3b 85       	ldd	r19, Y+11	; 0x0b
 5de:	2f 5f       	subi	r18, 0xFF	; 255
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	f9 01       	movw	r30, r18
 5e4:	20 81       	ld	r18, Z
 5e6:	32 2f       	mov	r19, r18
 5e8:	2c 85       	ldd	r18, Y+12	; 0x0c
 5ea:	20 95       	com	r18
 5ec:	23 23       	and	r18, r19
 5ee:	fc 01       	movw	r30, r24
 5f0:	20 83       	st	Z, r18
		if (flags & IOPORT_PULL_UP) {
 5f2:	8d 85       	ldd	r24, Y+13	; 0x0d
 5f4:	9e 85       	ldd	r25, Y+14	; 0x0e
 5f6:	84 70       	andi	r24, 0x04	; 4
 5f8:	99 27       	eor	r25, r25
 5fa:	89 2b       	or	r24, r25
 5fc:	71 f0       	breq	.+28     	; 0x61a <__LOCK_REGION_LENGTH__+0x21a>
			*((uint8_t *)port + 2) |= pin_mask;
 5fe:	8a 85       	ldd	r24, Y+10	; 0x0a
 600:	9b 85       	ldd	r25, Y+11	; 0x0b
 602:	02 96       	adiw	r24, 0x02	; 2
 604:	2a 85       	ldd	r18, Y+10	; 0x0a
 606:	3b 85       	ldd	r19, Y+11	; 0x0b
 608:	2e 5f       	subi	r18, 0xFE	; 254
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	f9 01       	movw	r30, r18
 60e:	30 81       	ld	r19, Z
 610:	2c 85       	ldd	r18, Y+12	; 0x0c
 612:	23 2b       	or	r18, r19
 614:	fc 01       	movw	r30, r24
 616:	20 83       	st	Z, r18
 618:	0f c0       	rjmp	.+30     	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
 61a:	8a 85       	ldd	r24, Y+10	; 0x0a
 61c:	9b 85       	ldd	r25, Y+11	; 0x0b
 61e:	02 96       	adiw	r24, 0x02	; 2
 620:	2a 85       	ldd	r18, Y+10	; 0x0a
 622:	3b 85       	ldd	r19, Y+11	; 0x0b
 624:	2e 5f       	subi	r18, 0xFE	; 254
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	f9 01       	movw	r30, r18
 62a:	20 81       	ld	r18, Z
 62c:	32 2f       	mov	r19, r18
 62e:	2c 85       	ldd	r18, Y+12	; 0x0c
 630:	20 95       	com	r18
 632:	23 23       	and	r18, r19
 634:	fc 01       	movw	r30, r24
 636:	20 83       	st	Z, r18
 638:	00 00       	nop
 63a:	6a 96       	adiw	r28, 0x1a	; 26
 63c:	0f b6       	in	r0, 0x3f	; 63
 63e:	f8 94       	cli
 640:	de bf       	out	0x3e, r29	; 62
 642:	0f be       	out	0x3f, r0	; 63
 644:	cd bf       	out	0x3d, r28	; 61
 646:	df 91       	pop	r29
 648:	cf 91       	pop	r28
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
